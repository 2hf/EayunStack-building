From 2924bc8875efbd22412ae051a183073cf0e030e4 Mon Sep 17 00:00:00 2001
From: Krisztian Gacsal <krisztian.gacsal@ericsson.com>
Date: Wed, 17 Jun 2015 16:50:10 +0200
Subject: [PATCH 27/34] WIP: REST API changes to support multi-attach

NOTE: the microversion support should be introduced in the python-novaclient
      to test new microversion in the REST API.

This patch adds the changes to the Nova REST API that expose the ability
for a Nova user to attach and detach a volume to multiple virtual
machine instances.

APIImpact

Implements blueprint: multi-attach-volume

Change-Id: I7c8ca05cb78180070ad09463e9f9c8c04b87b6b5
(cherry picked from commit b3ef7d93b2976476bbe28a59216bf76141fd6751)
---
 .../os-volumes/os-volumes-detail-resp.json         |   2 +-
 .../os-volumes/os-volumes-detail-resp.xml          |   2 +-
 .../os-volumes/os-volumes-get-resp.json            |   4 +-
 doc/api_samples/os-volumes/os-volumes-get-resp.xml |   2 +-
 .../os-volumes/os-volumes-index-resp.json          |   4 +-
 .../os-volumes/os-volumes-index-resp.xml           |   2 +-
 .../os-volumes/os-volumes-post-resp.json           |   4 +-
 .../os-volumes/os-volumes-post-resp.xml            |   2 +-
 .../os-volumes/os-volumes-detail-resp.json         |   3 +-
 .../os-volumes/os-volumes-get-resp.json            |   3 +-
 .../os-volumes/os-volumes-index-resp.json          |   3 +-
 .../os-volumes/os-volumes-post-resp.json           |   3 +-
 nova/api/ec2/cloud.py                              |  79 ++++++------
 nova/api/openstack/compute/contrib/volumes.py      |  49 +++++---
 nova/api/openstack/compute/plugins/v3/volumes.py   |   9 +-
 nova/tests/api/ec2/test_cinder_cloud.py            | 139 +++++++++++----------
 nova/tests/api/ec2/test_cloud.py                   |   4 +-
 nova/tests/api/ec2/test_ec2_validate.py            |   3 +-
 .../api/openstack/compute/contrib/test_volumes.py  |  10 +-
 nova/tests/api/openstack/fakes.py                  |   6 +-
 .../os-volumes/os-volumes-detail-resp.json.tpl     |   2 +-
 .../os-volumes/os-volumes-detail-resp.xml.tpl      |   2 +-
 .../os-volumes/os-volumes-get-resp.json.tpl        |   2 +-
 .../os-volumes/os-volumes-get-resp.xml.tpl         |   2 +-
 .../os-volumes/os-volumes-index-resp.json.tpl      |   2 +-
 .../os-volumes/os-volumes-index-resp.xml.tpl       |   2 +-
 .../os-volumes/os-volumes-post-resp.json.tpl       |   2 +-
 .../os-volumes/os-volumes-post-resp.xml.tpl        |   2 +-
 nova/tests/integrated/test_api_samples.py          |  14 +++
 .../os-volumes/os-volumes-detail-resp.json.tpl     |   3 +-
 .../os-volumes/os-volumes-get-resp.json.tpl        |   3 +-
 .../os-volumes/os-volumes-index-resp.json.tpl      |   3 +-
 .../os-volumes/os-volumes-post-resp.json.tpl       |   3 +-
 nova/tests/integrated/v3/test_volumes.py           |  11 +-
 34 files changed, 220 insertions(+), 166 deletions(-)

diff --git a/doc/api_samples/os-volumes/os-volumes-detail-resp.json b/doc/api_samples/os-volumes/os-volumes-detail-resp.json
index 6a92f5e..409d271 100644
--- a/doc/api_samples/os-volumes/os-volumes-detail-resp.json
+++ b/doc/api_samples/os-volumes/os-volumes-detail-resp.json
@@ -3,7 +3,7 @@
         {
             "attachments": [
                 {
-                    "device": "/",
+                    "device": "/dev/sdb",
                     "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
                     "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
                     "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
diff --git a/doc/api_samples/os-volumes/os-volumes-detail-resp.xml b/doc/api_samples/os-volumes/os-volumes-detail-resp.xml
index c6ff8c2..e0f765c 100644
--- a/doc/api_samples/os-volumes/os-volumes-detail-resp.xml
+++ b/doc/api_samples/os-volumes/os-volumes-detail-resp.xml
@@ -2,7 +2,7 @@
 <volumes>
   <volume status="in-use" displayDescription="Volume Description" availabilityZone="zone1:host1" displayName="Volume Name" volumeType="Backup" snapshotId="None" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" createdAt="2008-12-01 11:01:55" size="100">
     <attachments>
-      <attachment device="/" serverId="3912f2b4-c5ba-4aec-9165-872876fe202e" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" volumeId="a26887c6-c47b-4654-abb5-dfadf7d3f803"/>
+      <attachment device="/dev/sdb" serverId="3912f2b4-c5ba-4aec-9165-872876fe202e" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" volumeId="a26887c6-c47b-4654-abb5-dfadf7d3f803"/>
     </attachments>
     <metadata/>
   </volume>
diff --git a/doc/api_samples/os-volumes/os-volumes-get-resp.json b/doc/api_samples/os-volumes/os-volumes-get-resp.json
index 5c8429c..aba3c4e 100644
--- a/doc/api_samples/os-volumes/os-volumes-get-resp.json
+++ b/doc/api_samples/os-volumes/os-volumes-get-resp.json
@@ -2,7 +2,7 @@
     "volume": {
         "attachments": [
             {
-                "device": "/",
+                "device": "/dev/sdb",
                 "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
                 "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
                 "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
@@ -19,4 +19,4 @@
         "status": "in-use",
         "volumeType": "Backup"
     }
-}
\ No newline at end of file
+}
diff --git a/doc/api_samples/os-volumes/os-volumes-get-resp.xml b/doc/api_samples/os-volumes/os-volumes-get-resp.xml
index a65b78c..4a49a91 100644
--- a/doc/api_samples/os-volumes/os-volumes-get-resp.xml
+++ b/doc/api_samples/os-volumes/os-volumes-get-resp.xml
@@ -1,7 +1,7 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <volume status="in-use" displayDescription="Volume Description" availabilityZone="zone1:host1" displayName="Volume Name" volumeType="Backup" snapshotId="None" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" createdAt="2008-12-01 11:01:55" size="100">
   <attachments>
-    <attachment device="/" serverId="3912f2b4-c5ba-4aec-9165-872876fe202e" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" volumeId="a26887c6-c47b-4654-abb5-dfadf7d3f803"/>
+    <attachment device="/dev/sdb" serverId="3912f2b4-c5ba-4aec-9165-872876fe202e" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" volumeId="a26887c6-c47b-4654-abb5-dfadf7d3f803"/>
   </attachments>
   <metadata/>
 </volume>
diff --git a/doc/api_samples/os-volumes/os-volumes-index-resp.json b/doc/api_samples/os-volumes/os-volumes-index-resp.json
index c0fa4b8..1a5a1a3 100644
--- a/doc/api_samples/os-volumes/os-volumes-index-resp.json
+++ b/doc/api_samples/os-volumes/os-volumes-index-resp.json
@@ -3,7 +3,7 @@
         {
             "attachments": [
                 {
-                    "device": "/",
+                    "device": "/dev/sdb",
                     "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
                     "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
                     "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
@@ -21,4 +21,4 @@
             "volumeType": "Backup"
         }
     ]
-}
\ No newline at end of file
+}
diff --git a/doc/api_samples/os-volumes/os-volumes-index-resp.xml b/doc/api_samples/os-volumes/os-volumes-index-resp.xml
index c6ff8c2..e0f765c 100644
--- a/doc/api_samples/os-volumes/os-volumes-index-resp.xml
+++ b/doc/api_samples/os-volumes/os-volumes-index-resp.xml
@@ -2,7 +2,7 @@
 <volumes>
   <volume status="in-use" displayDescription="Volume Description" availabilityZone="zone1:host1" displayName="Volume Name" volumeType="Backup" snapshotId="None" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" createdAt="2008-12-01 11:01:55" size="100">
     <attachments>
-      <attachment device="/" serverId="3912f2b4-c5ba-4aec-9165-872876fe202e" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" volumeId="a26887c6-c47b-4654-abb5-dfadf7d3f803"/>
+      <attachment device="/dev/sdb" serverId="3912f2b4-c5ba-4aec-9165-872876fe202e" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" volumeId="a26887c6-c47b-4654-abb5-dfadf7d3f803"/>
     </attachments>
     <metadata/>
   </volume>
diff --git a/doc/api_samples/os-volumes/os-volumes-post-resp.json b/doc/api_samples/os-volumes/os-volumes-post-resp.json
index ba3795a..6e1cd18 100644
--- a/doc/api_samples/os-volumes/os-volumes-post-resp.json
+++ b/doc/api_samples/os-volumes/os-volumes-post-resp.json
@@ -2,7 +2,7 @@
     "volume": {
         "attachments": [
             {
-                "device": "/",
+                "device": "/dev/sdb",
                 "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
                 "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
                 "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
@@ -19,4 +19,4 @@
         "status": "in-use",
         "volumeType": "Backup"
     }
-}
\ No newline at end of file
+}
diff --git a/doc/api_samples/os-volumes/os-volumes-post-resp.xml b/doc/api_samples/os-volumes/os-volumes-post-resp.xml
index a65b78c..4a49a91 100644
--- a/doc/api_samples/os-volumes/os-volumes-post-resp.xml
+++ b/doc/api_samples/os-volumes/os-volumes-post-resp.xml
@@ -1,7 +1,7 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <volume status="in-use" displayDescription="Volume Description" availabilityZone="zone1:host1" displayName="Volume Name" volumeType="Backup" snapshotId="None" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" createdAt="2008-12-01 11:01:55" size="100">
   <attachments>
-    <attachment device="/" serverId="3912f2b4-c5ba-4aec-9165-872876fe202e" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" volumeId="a26887c6-c47b-4654-abb5-dfadf7d3f803"/>
+    <attachment device="/dev/sdb" serverId="3912f2b4-c5ba-4aec-9165-872876fe202e" id="a26887c6-c47b-4654-abb5-dfadf7d3f803" volumeId="a26887c6-c47b-4654-abb5-dfadf7d3f803"/>
   </attachments>
   <metadata/>
 </volume>
diff --git a/doc/v3/api_samples/os-volumes/os-volumes-detail-resp.json b/doc/v3/api_samples/os-volumes/os-volumes-detail-resp.json
index 6a92f5e..e4dd9e3 100644
--- a/doc/v3/api_samples/os-volumes/os-volumes-detail-resp.json
+++ b/doc/v3/api_samples/os-volumes/os-volumes-detail-resp.json
@@ -3,12 +3,13 @@
         {
             "attachments": [
                 {
-                    "device": "/",
+                    "device": "/dev/sdb",
                     "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
                     "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
                     "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
                 }
             ],
+            "multiattach": "False",
             "availabilityZone": "zone1:host1",
             "createdAt": "1999-01-01T01:01:01.000000",
             "displayDescription": "Volume Description",
diff --git a/doc/v3/api_samples/os-volumes/os-volumes-get-resp.json b/doc/v3/api_samples/os-volumes/os-volumes-get-resp.json
index 5c8429c..ea9bca5 100644
--- a/doc/v3/api_samples/os-volumes/os-volumes-get-resp.json
+++ b/doc/v3/api_samples/os-volumes/os-volumes-get-resp.json
@@ -2,12 +2,13 @@
     "volume": {
         "attachments": [
             {
-                "device": "/",
+                "device": "/dev/sdb",
                 "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
                 "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
                 "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
             }
         ],
+        "multiattach": "False",
         "availabilityZone": "zone1:host1",
         "createdAt": "2013-02-18T14:51:18.528085",
         "displayDescription": "Volume Description",
diff --git a/doc/v3/api_samples/os-volumes/os-volumes-index-resp.json b/doc/v3/api_samples/os-volumes/os-volumes-index-resp.json
index c0fa4b8..f4819b2 100644
--- a/doc/v3/api_samples/os-volumes/os-volumes-index-resp.json
+++ b/doc/v3/api_samples/os-volumes/os-volumes-index-resp.json
@@ -3,12 +3,13 @@
         {
             "attachments": [
                 {
-                    "device": "/",
+                    "device": "/dev/sdb",
                     "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
                     "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
                     "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
                 }
             ],
+            "multiattach": "False",
             "availabilityZone": "zone1:host1",
             "createdAt": "2013-02-19T20:01:40.274897",
             "displayDescription": "Volume Description",
diff --git a/doc/v3/api_samples/os-volumes/os-volumes-post-resp.json b/doc/v3/api_samples/os-volumes/os-volumes-post-resp.json
index ba3795a..22c2f7d 100644
--- a/doc/v3/api_samples/os-volumes/os-volumes-post-resp.json
+++ b/doc/v3/api_samples/os-volumes/os-volumes-post-resp.json
@@ -2,12 +2,13 @@
     "volume": {
         "attachments": [
             {
-                "device": "/",
+                "device": "/dev/sdb",
                 "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
                 "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
                 "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
             }
         ],
+        "multiattach": "False",
         "availabilityZone": "zone1:host1",
         "createdAt": "2013-02-18T14:51:17.970024",
         "displayDescription": "Volume Description",
diff --git a/nova/api/ec2/cloud.py b/nova/api/ec2/cloud.py
index fc0fef0..49a52a0 100644
--- a/nova/api/ec2/cloud.py
+++ b/nova/api/ec2/cloud.py
@@ -805,35 +805,39 @@ class CloudController(object):
         return {'volumeSet': volumes}
 
     def _format_volume(self, context, volume):
+        # format an openstack volume into ec2 format
+        # openstack to ec2 volume status mapping
         valid_ec2_api_volume_status_map = {
             'attaching': 'in-use',
             'detaching': 'in-use'}
 
-        instance_ec2_id = None
-
-        if volume.get('instance_uuid', None):
-            instance_uuid = volume['instance_uuid']
-            # Make sure instance exists
-            objects.Instance.get_by_uuid(context.elevated(), instance_uuid)
-
-            instance_ec2_id = ec2utils.id_to_ec2_inst_id(instance_uuid)
-
         v = {}
         v['volumeId'] = ec2utils.id_to_ec2_vol_id(volume['id'])
-        v['status'] = valid_ec2_api_volume_status_map.get(volume['status'],
+        v['state'] = valid_ec2_api_volume_status_map.get(volume['status'],
                                                           volume['status'])
         v['size'] = volume['size']
         v['availabilityZone'] = volume['availability_zone']
         v['createTime'] = volume['created_at']
-        if volume['attach_status'] == 'attached':
-            v['attachmentSet'] = [{'attachTime': volume['attach_time'],
-                                   'deleteOnTermination': False,
-                                   'device': volume['mountpoint'],
-                                   'instanceId': instance_ec2_id,
-                                   'status': 'attached',
-                                   'volumeId': v['volumeId']}]
-        else:
-            v['attachmentSet'] = [{}]
+
+        # Default return is empty attachments list
+        v['attachments'] = []
+        attachments = volume.get('attachments')
+
+        # always return attachments regardless of volume status
+        if attachments:
+            for attachment in attachments:
+                attachment_ec2_ints_id = ec2utils.id_to_ec2_inst_id(
+                    attachment.get('instance_uuid'))
+                a = {
+                     'attachTime': attachment.get('attachTime'),
+                     'device': attachment.get('mountpoint'),
+                     'instanceId': attachment_ec2_ints_id,
+                     'state': volume['attach_status'],
+                     'volumeId': v['volumeId'],
+                     'deleteOnTermination': False
+                    }
+                v['attachments'].append(a)
+
         if volume.get('snapshot_id') is not None:
             v['snapshotId'] = ec2utils.id_to_ec2_snap_id(volume['snapshot_id'])
         else:
@@ -884,6 +888,7 @@ class CloudController(object):
                       volume_id,
                       instance_id,
                       device, **kwargs):
+        # attach volume to instance_id
         validate_instance_id(instance_id)
         validate_volume_id(volume_id)
         volume_id = ec2utils.ec2_vol_id_to_uuid(volume_id)
@@ -899,42 +904,30 @@ class CloudController(object):
 
         self.compute_api.attach_volume(context, instance, volume_id, device)
         volume = self.volume_api.get(context, volume_id)
-        ec2_attach_status = ec2utils.status_to_ec2_attach_status(volume)
-
-        return {'attachTime': volume['attach_time'],
-                'device': volume['mountpoint'],
-                'instanceId': ec2utils.id_to_ec2_inst_id(instance_uuid),
-                'requestId': context.request_id,
-                'status': ec2_attach_status,
-                'volumeId': ec2utils.id_to_ec2_vol_id(volume_id)}
+        ec2_formatted_volume = self._format_volume(context, volume)
+        return ec2_formatted_volume
 
-    def _get_instance_from_volume(self, context, volume):
-        if volume.get('instance_uuid'):
+    def _get_instance_from_volume(self, context, volume, instance_id):
+        attachments = volume.get('attachments')
+        if attachments:
             try:
-                inst_uuid = volume['instance_uuid']
-                return objects.Instance.get_by_uuid(context, inst_uuid)
+                instance_uuid = ec2utils.ec2_inst_id_to_uuid(context,
+                                                             instance_id)
+                return objects.Instance.get_by_uuid(context, instance_uuid)
             except exception.InstanceNotFound:
                 pass
         raise exception.VolumeUnattached(volume_id=volume['id'])
 
-    def detach_volume(self, context, volume_id, **kwargs):
+    def detach_volume(self, context, volume_id, instance_id):
         validate_volume_id(volume_id)
         volume_id = ec2utils.ec2_vol_id_to_uuid(volume_id)
         LOG.audit(_("Detach volume %s"), volume_id, context=context)
         volume = self.volume_api.get(context, volume_id)
-        instance = self._get_instance_from_volume(context, volume)
 
+        instance = self._get_instance_from_volume(context, volume, instance_id)
         self.compute_api.detach_volume(context, instance, volume)
-        resp_volume = self.volume_api.get(context, volume_id)
-        ec2_attach_status = ec2utils.status_to_ec2_attach_status(resp_volume)
-
-        return {'attachTime': volume['attach_time'],
-                'device': volume['mountpoint'],
-                'instanceId': ec2utils.id_to_ec2_inst_id(
-                    volume['instance_uuid']),
-                'requestId': context.request_id,
-                'status': ec2_attach_status,
-                'volumeId': ec2utils.id_to_ec2_vol_id(volume_id)}
+        ec2_formatted_volume = self._format_volume(context, volume)
+        return ec2_formatted_volume
 
     def _format_kernel_id(self, context, instance_ref, result, key):
         kernel_uuid = instance_ref['kernel_id']
diff --git a/nova/api/openstack/compute/contrib/volumes.py b/nova/api/openstack/compute/contrib/volumes.py
index 6387b33..150e4e4 100644
--- a/nova/api/openstack/compute/contrib/volumes.py
+++ b/nova/api/openstack/compute/contrib/volumes.py
@@ -58,10 +58,8 @@ def _translate_volume_summary_view(context, vol):
     d['availabilityZone'] = vol['availability_zone']
     d['createdAt'] = vol['created_at']
 
-    if vol['attach_status'] == 'attached':
-        d['attachments'] = [_translate_attachment_detail_view(vol['id'],
-            vol['instance_uuid'],
-            vol['mountpoint'])]
+    if vol['attach_status'] == 'attached' and 'attachments' in vol:
+        d['attachments'] = _translate_attachment_detail_view(vol)
     else:
         d['attachments'] = [{}]
 
@@ -270,27 +268,26 @@ class VolumeController(wsgi.Controller):
         return wsgi.ResponseObject(result, headers=dict(location=location))
 
 
-def _translate_attachment_detail_view(volume_id, instance_uuid, mountpoint):
+def _translate_attachment_detail_view(volume):
     """Maps keys for attachment details view."""
 
-    d = _translate_attachment_summary_view(volume_id,
-            instance_uuid,
-            mountpoint)
+    attachments = []
+    for attach in volume['attachments']:
+        a = _translate_attachment_summary_view(volume['id'],
+                                               attach['serverId'],
+                                               attach['device'])
+        attachments.append(a)
 
     # No additional data / lookups at the moment
-    return d
+    return attachments
 
 
 def _translate_attachment_summary_view(volume_id, instance_uuid, mountpoint):
     """Maps keys for attachment summary view."""
-    d = {}
-
-    # NOTE(justinsb): We use the volume id as the id of the attachment object
-    d['id'] = volume_id
+    d = {'id': volume_id,
+         'volumeId': volume_id,
+         'serverId': instance_uuid}
 
-    d['volumeId'] = volume_id
-
-    d['serverId'] = instance_uuid
     if mountpoint:
         d['device'] = mountpoint
 
@@ -374,10 +371,22 @@ class VolumeAttachmentController(wsgi.Controller):
             msg = _("volume_id not found: %s") % volume_id
             raise exc.HTTPNotFound(explanation=msg)
 
-        return {'volumeAttachment': _translate_attachment_detail_view(
-            volume_id,
-            instance['uuid'],
-            assigned_mountpoint)}
+        try:
+            vol = self.volume_api.get(context, volume_id)
+        except exception.NotFound:
+            raise exc.HTTPNotFound()
+
+        if 'attachments' in vol:
+            attachments = _translate_attachment_detail_view(vol)
+        else:
+            attachments = [{}]
+        attachment = None
+        for attach in attachments:
+            if attach['serverId'] == instance['uuid']:
+                attachment = attach
+                break
+
+        return {'volumeAttachment': attachment}
 
     def _validate_volume_id(self, volume_id):
         if not uuidutils.is_uuid_like(volume_id):
diff --git a/nova/api/openstack/compute/plugins/v3/volumes.py b/nova/api/openstack/compute/plugins/v3/volumes.py
index c0951f9..ce0cade 100644
--- a/nova/api/openstack/compute/plugins/v3/volumes.py
+++ b/nova/api/openstack/compute/plugins/v3/volumes.py
@@ -53,11 +53,16 @@ def _translate_volume_summary_view(context, vol):
     d['createdAt'] = vol['created_at']
 
     if vol['attach_status'] == 'attached':
+        instance_uuid = ",".join((attachment['serverId']
+                                  for attachment in vol['attachments']))
+        mountpoint = ",".join((attachment['device']
+                               for attachment in vol['attachments']))
         d['attachments'] = [_translate_attachment_detail_view(vol['id'],
-            vol['instance_uuid'],
-            vol['mountpoint'])]
+                                                              instance_uuid,
+                                                              mountpoint)]
     else:
         d['attachments'] = [{}]
+    d['multiattach'] = vol.get('multiattach')
 
     d['displayName'] = vol['display_name']
     d['displayDescription'] = vol['display_description']
diff --git a/nova/tests/api/ec2/test_cinder_cloud.py b/nova/tests/api/ec2/test_cinder_cloud.py
index 73a38cc..92bb298 100644
--- a/nova/tests/api/ec2/test_cinder_cloud.py
+++ b/nova/tests/api/ec2/test_cinder_cloud.py
@@ -175,6 +175,15 @@ class CinderCloudTestCase(test.TestCase):
         return keypair_api.create_key_pair(self.context, self.context.user_id,
                                            name)
 
+    def get_vols(self, instance_uuid):
+        volumes = self.volume_api.get_all(self.context)
+        vols = []
+        for vol in volumes:
+            for attachment in vol['attachments']:
+                if attachment.get('instance_uuid') == instance_uuid:
+                    vols.append(vol)
+        return vols
+
     def test_describe_volumes(self):
         # Makes sure describe_volumes works and filters results.
 
@@ -182,7 +191,7 @@ class CinderCloudTestCase(test.TestCase):
                                         size=1,
                                         name='test-1',
                                         description='test volume 1')
-        self.assertEqual(vol1['status'], 'available')
+        self.assertEqual(vol1['state'], 'available')
         vol2 = self.cloud.create_volume(self.context,
                                         size=1,
                                         name='test-2',
@@ -202,7 +211,7 @@ class CinderCloudTestCase(test.TestCase):
                        'status': 'creating',
                        'availability_zone': 'nova',
                        'volumeId': 'vol-0000000a',
-                       'attachmentSet': [{}],
+                       'attachmentSet': [],
                        'snapshotId': None,
                        'created_at': '2013-04-18T06:03:35.025626',
                        'size': 1,
@@ -210,20 +219,20 @@ class CinderCloudTestCase(test.TestCase):
                        'attach_status': None}
 
         self.assertEqual(self.cloud._format_volume(self.context,
-                                                   fake_volume)['status'],
+                                                   fake_volume)['state'],
                                                    'creating')
 
         fake_volume['status'] = 'attaching'
         self.assertEqual(self.cloud._format_volume(self.context,
-                                                   fake_volume)['status'],
+                                                   fake_volume)['state'],
                                                    'in-use')
         fake_volume['status'] = 'detaching'
         self.assertEqual(self.cloud._format_volume(self.context,
-                                                   fake_volume)['status'],
+                                                   fake_volume)['state'],
                                                    'in-use')
         fake_volume['status'] = 'banana'
         self.assertEqual(self.cloud._format_volume(self.context,
-                                                   fake_volume)['status'],
+                                                   fake_volume)['state'],
                                                    'banana')
 
     def test_create_volume_in_availability_zone(self):
@@ -273,46 +282,52 @@ class CinderCloudTestCase(test.TestCase):
 
     def test_volume_status_of_attaching_volume(self):
         """Test the volume's status in response when attaching a volume."""
-        vol1 = self.cloud.create_volume(self.context,
+        ec2_formatted_vol = self.cloud.create_volume(self.context,
                                         size=1,
                                         name='test-ls',
                                         description='test volume ls')
-        self.assertEqual('available', vol1['status'])
+        # verify ec2_formatted_vol state is available before attaching
+        self.assertEqual('available', ec2_formatted_vol['state'])
 
         kwargs = {'image_id': 'ami-1',
                   'instance_type': CONF.default_flavor,
                   'max_count': 1}
         ec2_instance_id = self._run_instance(**kwargs)
         resp = self.cloud.attach_volume(self.context,
-                                        vol1['volumeId'],
+                                        ec2_formatted_vol['volumeId'],
                                         ec2_instance_id,
                                         '/dev/sde')
-        # Here,the status should be 'attaching',but it can be 'attached' in
-        # unittest scenario if the attach action is very fast.
-        self.assertIn(resp['status'], ('attaching', 'attached'))
+
+        resp = self.cloud.describe_volumes(self.context,
+                                           [ec2_formatted_vol['volumeId']])
+        volume = resp['volumeSet'][0]
+        self.assertEqual('in-use', volume['state'])
+        self.assertThat({'state': 'attached',
+                         'volumeId': ec2_formatted_vol['volumeId']},
+                         matchers.IsSubDictOf(volume['attachments'][0]))
 
     def test_volume_status_of_detaching_volume(self):
         """Test the volume's status in response when detaching a volume."""
-        vol1 = self.cloud.create_volume(self.context,
+        ec2_formatted_vol = self.cloud.create_volume(self.context,
                                         size=1,
                                         name='test-ls',
                                         description='test volume ls')
-        self.assertEqual('available', vol1['status'])
-        vol1_uuid = ec2utils.ec2_vol_id_to_uuid(vol1['volumeId'])
+        # verify ec2_formatted_vol state is available before attaching
+        self.assertEqual('available', ec2_formatted_vol['state'])
+
         kwargs = {'image_id': 'ami-1',
                   'instance_type': CONF.default_flavor,
                   'max_count': 1}
-        ec2_instance_id = self._run_instance(**kwargs)
 
-        # NOTE(ft): Since fake detach action is very fast, we replace it to
-        # empty function to check EC2 API results at 'detaching' stage
-
-        vol1 = self.cloud.attach_volume(self.context,
-                                        vol1['volumeId'],
+        ec2_instance_id = self._run_instance(**kwargs)
+        ec2_formatted_vol = self.cloud.attach_volume(self.context,
+                                        ec2_formatted_vol['volumeId'],
                                         ec2_instance_id,
-                                        '/dev/sde')
+                                        '/dev/sdb')
 
-        def fake_detach_volume(context, ec2_vol_id, instance_id):
+        # NOTE:Since cloud.detach_volume is uninterruptible, we stub out to
+        # fake_volume_detach to check EC2 API results at 'detaching' state
+        def fake_detach_volume(context, ec2_vol_id, ec2_instance_id):
             vol_uuid = ec2utils.ec2_vol_id_to_uuid(ec2_vol_id)
             volume = self.volume_api.get(context, vol_uuid)
             volume['attachments'][0]['state'] = 'detaching'
@@ -321,20 +336,28 @@ class CinderCloudTestCase(test.TestCase):
 
         self.stubs.Set(self.cloud, 'detach_volume', fake_detach_volume)
 
-        resp = self.cloud.detach_volume(self.context,
-                                        vol1['volumeId'],
-                                        ec2_instance_id)
-
-        self.assertEqual('in-use', resp['status'])
-        resp = self.cloud.describe_volumes(self.context, [vol1['volumeId']])
-        volume = resp['volumeSet'][0]
-        self.assertEqual('in-use', volume['status'])
-        # device and instanceId
-        self.assertThat({'status': 'attached',
+        ec2_formatted_vol = self.cloud.detach_volume(
+            self.context,
+            ec2_formatted_vol['volumeId'],
+            ec2_instance_id)
+
+        # fake_detach_volume should cause volume status map to in-use
+        self.assertEqual('in-use', ec2_formatted_vol['state'])
+
+        # verify describe_volumes returns a status mapped to in-use
+        # because the volume is still detaching
+        ec2_formatted_volset = self.cloud.describe_volumes(
+            self.context,
+            [ec2_formatted_vol['volumeId']])
+        ec2_formatted_vol = ec2_formatted_volset['volumeSet'][0]
+        self.assertEqual('in-use', ec2_formatted_vol['state'])
+        # verify ec2_formatted_vol keys
+        self.assertThat({'state': 'attached',
                          'volumeId': 'vol-00000001',
-                         'device': None,
-                         'instanceId': None},
-                         matchers.IsSubDictOf(volume['attachmentSet'][0]))
+                         'device': '/dev/sdb',
+                         'instanceId': 'i-00000001'},
+                         matchers.IsSubDictOf(
+                            ec2_formatted_vol['attachments'][0]))
 
     def test_describe_snapshots(self):
         # Makes sure describe_snapshots works and filters results.
@@ -829,6 +852,10 @@ class CinderCloudTestCase(test.TestCase):
         self.assertEqual(vol['attachments'][0].get('mountpoint'), mountpoint)
         self.assertEqual(vol['status'], "in-use")
         self.assertEqual(vol['attach_status'], "attached")
+        attachment = self.volume_api.get_volume_attachment(vol, instance_uuid)
+        self.assertIsNotNone(attachment)
+        self.assertEqual(attachment['instance_uuid'], instance_uuid)
+        self.assertEqual(attachment['mountpoint'], mountpoint)
 
     def _assert_volume_detached(self, vol):
         self.assertIsNone(vol['instance_uuid'])
@@ -870,6 +897,7 @@ class CinderCloudTestCase(test.TestCase):
                 if v['attachments'][0].get('instance_uuid') == instance_uuid:
                     vols.append(v)
 
+        vols = self.get_vols(instance_uuid)
         self.assertEqual(len(vols), 2)
         for vol in vols:
             self.assertIn(str(vol['id']), [str(vol1_uuid), str(vol2_uuid)])
@@ -896,20 +924,14 @@ class CinderCloudTestCase(test.TestCase):
         self._assert_volume_attached(vol, instance_uuid, '/dev/sdc')
 
         self.cloud.start_instances(self.context, [ec2_instance_id])
-        vols_dict = self.volume_api.get_all(self.context)
-        vols = []
-        for v in vols_dict:
-            if v['attachments'] != []:
-                if v['attachments'][0].get('instance_uuid') == instance_uuid:
-                    vols.append(v)
-
+        vols = self.get_vols(instance_uuid)
         self.assertEqual(len(vols), 2)
         for vol in vols:
             self.assertIn(str(vol['id']), [str(vol1_uuid), str(vol2_uuid)])
-            self.assertIn(vol['attachments'][0].get('mountpoint'),
-                          ['/dev/sdb', '/dev/sdc'])
-            self.assertEqual(vol['attachments'][0].get('instance_uuid'),
-                             instance_uuid)
+            attachment = self.volume_api.get_volume_attachment(vol,
+                                                               instance_uuid)
+            self.assertIn(attachment['mountpoint'], ['/dev/sdb', '/dev/sdc'])
+            self.assertEqual(attachment['instance_uuid'], instance_uuid)
             self.assertEqual(vol['status'], "in-use")
             self.assertEqual(vol['attach_status'], "attached")
 
@@ -947,13 +969,7 @@ class CinderCloudTestCase(test.TestCase):
         instance_uuid = ec2utils.ec2_inst_id_to_uuid(self.context,
                                                      ec2_instance_id)
 
-        vols_dict = self.volume_api.get_all(self.context)
-        vols = []
-        for v in vols_dict:
-            if v['attachments'] != []:
-                if v['attachments'][0].get('instance_uuid') == instance_uuid:
-                    vols.append(v)
-
+        vols = self.get_vols(instance_uuid)
         self.assertEqual(len(vols), 1)
         for vol in vols:
             self.assertEqual(vol['id'], vol1_uuid)
@@ -986,12 +1002,7 @@ class CinderCloudTestCase(test.TestCase):
         self._assert_volume_attached(vol2, instance_uuid, '/dev/sdc')
 
         self.cloud.start_instances(self.context, [ec2_instance_id])
-        vols_dict = self.volume_api.get_all(self.context)
-        vols = []
-        for v in vols_dict:
-            if v['attachments'] != []:
-                if v['attachments'][0].get('instance_uuid') == instance_uuid:
-                    vols.append(v)
+        vols = self.get_vols(instance_uuid)
         self.assertEqual(len(vols), 1)
 
         self._assert_volume_detached(vol1)
@@ -1040,13 +1051,7 @@ class CinderCloudTestCase(test.TestCase):
         instance_uuid = ec2utils.ec2_inst_id_to_uuid(self.context,
                                                      ec2_instance_id)
 
-        vols_dict = self.volume_api.get_all(self.context)
-        vols = []
-        for v in vols_dict:
-            if v['attachments'] != []:
-                if v['attachments'][0].get('instance_uuid') == instance_uuid:
-                    vols.append(v)
-
+        vols = self.get_vols(instance_uuid)
         self.assertEqual(len(vols), 2)
 
         vol1_id = None
diff --git a/nova/tests/api/ec2/test_cloud.py b/nova/tests/api/ec2/test_cloud.py
index 909b39c..fb1a58b 100644
--- a/nova/tests/api/ec2/test_cloud.py
+++ b/nova/tests/api/ec2/test_cloud.py
@@ -3126,6 +3126,7 @@ class CloudTestCase(test.TestCase):
         # Validates that VolumeUnattached is raised if the volume doesn't
         # have an instance_uuid value.
         ec2_volume_id = 'vol-987654321'
+        ec2_instance_id = 'inst-987654321'
 
         with mock.patch.object(self.cloud.volume_api, 'get',
                                side_effect=lambda context, volume_id:
@@ -3133,7 +3134,8 @@ class CloudTestCase(test.TestCase):
             self.assertRaises(exception.VolumeUnattached,
                               self.cloud.detach_volume,
                               self.context,
-                              ec2_volume_id)
+                              ec2_volume_id,
+                              ec2_instance_id)
             mock_get.assert_called_once_with(self.context, mock.ANY)
             mock_ec2_vol_id_to_uuid.assert_called_once_with(ec2_volume_id)
 
diff --git a/nova/tests/api/ec2/test_ec2_validate.py b/nova/tests/api/ec2/test_ec2_validate.py
index a058e46..eacb9ae 100644
--- a/nova/tests/api/ec2/test_ec2_validate.py
+++ b/nova/tests/api/ec2/test_ec2_validate.py
@@ -178,7 +178,8 @@ class EC2ValidateTestCase(test.TestCase):
             self.assertRaises(e,
                               self.cloud.detach_volume,
                               context=self.context,
-                              volume_id=ec2_id)
+                              volume_id=ec2_id,
+                              instance_id='FAKE_ID')
 
 
 class EC2TimestampValidationTestCase(test.NoDBTestCase):
diff --git a/nova/tests/api/openstack/compute/contrib/test_volumes.py b/nova/tests/api/openstack/compute/contrib/test_volumes.py
index 32b4ce0..0e87b4c 100644
--- a/nova/tests/api/openstack/compute/contrib/test_volumes.py
+++ b/nova/tests/api/openstack/compute/contrib/test_volumes.py
@@ -58,7 +58,15 @@ def fake_get_instance(self, context, instance_id, want_objects=False):
 
 
 def fake_get_volume(self, context, id):
-    return {'id': 'woot'}
+    return {'id': FAKE_UUID_A,
+            'status': 'available',
+            'attachments': [{
+                'serverId': FAKE_UUID,
+                'device': '/dev/fake0',
+                'id': FAKE_UUID,
+                'volumeId': FAKE_UUID,
+            }
+            ]}
 
 
 def fake_attach_volume(self, context, instance, volume_id, device):
diff --git a/nova/tests/api/openstack/fakes.py b/nova/tests/api/openstack/fakes.py
index dcd06fb..9d7b9df 100644
--- a/nova/tests/api/openstack/fakes.py
+++ b/nova/tests/api/openstack/fakes.py
@@ -564,8 +564,6 @@ def stub_volume(id, **kwargs):
         'host': 'fakehost',
         'size': 1,
         'availability_zone': 'fakeaz',
-        'instance_uuid': 'fakeuuid',
-        'mountpoint': '/',
         'status': 'fakestatus',
         'attach_status': 'attached',
         'name': 'vol name',
@@ -575,7 +573,9 @@ def stub_volume(id, **kwargs):
         'snapshot_id': None,
         'volume_type_id': 'fakevoltype',
         'volume_metadata': [],
-        'volume_type': {'name': 'vol_type_name'}}
+        'volume_type': {'name': 'vol_type_name'},
+        'attachments': [],
+        'multiattach': 'false'}
 
     volume.update(kwargs)
     return volume
diff --git a/nova/tests/integrated/api_samples/os-volumes/os-volumes-detail-resp.json.tpl b/nova/tests/integrated/api_samples/os-volumes/os-volumes-detail-resp.json.tpl
index 82a63ed..cc9f87d 100644
--- a/nova/tests/integrated/api_samples/os-volumes/os-volumes-detail-resp.json.tpl
+++ b/nova/tests/integrated/api_samples/os-volumes/os-volumes-detail-resp.json.tpl
@@ -3,7 +3,7 @@
         {
             "attachments": [
                 {
-                    "device": "/",
+                    "device": "/dev/sdb",
                     "id": "%(uuid)s",
                     "serverId": "%(uuid)s",
                     "volumeId": "%(uuid)s"
diff --git a/nova/tests/integrated/api_samples/os-volumes/os-volumes-detail-resp.xml.tpl b/nova/tests/integrated/api_samples/os-volumes/os-volumes-detail-resp.xml.tpl
index bd8f324..e282dc9 100644
--- a/nova/tests/integrated/api_samples/os-volumes/os-volumes-detail-resp.xml.tpl
+++ b/nova/tests/integrated/api_samples/os-volumes/os-volumes-detail-resp.xml.tpl
@@ -2,7 +2,7 @@
 <volumes>
   <volume status="in-use" displayDescription="%(volume_desc)s" availabilityZone="zone1:host1" displayName="%(volume_name)s" volumeType="Backup" snapshotId="None" id="%(uuid)s" createdAt="%(xmltime)s" size="100">
     <attachments>
-      <attachment device="/" serverId="%(uuid)s" id="%(uuid)s" volumeId="%(uuid)s"/>
+      <attachment device="/dev/sdb" serverId="%(uuid)s" id="%(uuid)s" volumeId="%(uuid)s"/>
     </attachments>
     <metadata/>
   </volume>
diff --git a/nova/tests/integrated/api_samples/os-volumes/os-volumes-get-resp.json.tpl b/nova/tests/integrated/api_samples/os-volumes/os-volumes-get-resp.json.tpl
index 84bfdd2..d55ba77 100644
--- a/nova/tests/integrated/api_samples/os-volumes/os-volumes-get-resp.json.tpl
+++ b/nova/tests/integrated/api_samples/os-volumes/os-volumes-get-resp.json.tpl
@@ -2,7 +2,7 @@
     "volume": {
         "attachments": [
             {
-                "device": "/",
+                "device": "/dev/sdb",
                 "id": "%(uuid)s",
                 "serverId": "%(uuid)s",
                 "volumeId": "%(uuid)s"
diff --git a/nova/tests/integrated/api_samples/os-volumes/os-volumes-get-resp.xml.tpl b/nova/tests/integrated/api_samples/os-volumes/os-volumes-get-resp.xml.tpl
index cb3c5ed..c881aaf 100644
--- a/nova/tests/integrated/api_samples/os-volumes/os-volumes-get-resp.xml.tpl
+++ b/nova/tests/integrated/api_samples/os-volumes/os-volumes-get-resp.xml.tpl
@@ -1,7 +1,7 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <volume status="in-use" displayDescription="%(volume_desc)s" availabilityZone="zone1:host1" displayName="%(volume_name)s" volumeType="Backup" snapshotId="None" id="%(uuid)s" createdAt="%(xmltime)s" size="100">
   <attachments>
-    <attachment device="/" serverId="%(uuid)s" id="%(uuid)s" volumeId="%(uuid)s"/>
+    <attachment device="/dev/sdb" serverId="%(uuid)s" id="%(uuid)s" volumeId="%(uuid)s"/>
   </attachments>
   <metadata/>
 </volume>
diff --git a/nova/tests/integrated/api_samples/os-volumes/os-volumes-index-resp.json.tpl b/nova/tests/integrated/api_samples/os-volumes/os-volumes-index-resp.json.tpl
index 82a63ed..cc9f87d 100644
--- a/nova/tests/integrated/api_samples/os-volumes/os-volumes-index-resp.json.tpl
+++ b/nova/tests/integrated/api_samples/os-volumes/os-volumes-index-resp.json.tpl
@@ -3,7 +3,7 @@
         {
             "attachments": [
                 {
-                    "device": "/",
+                    "device": "/dev/sdb",
                     "id": "%(uuid)s",
                     "serverId": "%(uuid)s",
                     "volumeId": "%(uuid)s"
diff --git a/nova/tests/integrated/api_samples/os-volumes/os-volumes-index-resp.xml.tpl b/nova/tests/integrated/api_samples/os-volumes/os-volumes-index-resp.xml.tpl
index bd8f324..e282dc9 100644
--- a/nova/tests/integrated/api_samples/os-volumes/os-volumes-index-resp.xml.tpl
+++ b/nova/tests/integrated/api_samples/os-volumes/os-volumes-index-resp.xml.tpl
@@ -2,7 +2,7 @@
 <volumes>
   <volume status="in-use" displayDescription="%(volume_desc)s" availabilityZone="zone1:host1" displayName="%(volume_name)s" volumeType="Backup" snapshotId="None" id="%(uuid)s" createdAt="%(xmltime)s" size="100">
     <attachments>
-      <attachment device="/" serverId="%(uuid)s" id="%(uuid)s" volumeId="%(uuid)s"/>
+      <attachment device="/dev/sdb" serverId="%(uuid)s" id="%(uuid)s" volumeId="%(uuid)s"/>
     </attachments>
     <metadata/>
   </volume>
diff --git a/nova/tests/integrated/api_samples/os-volumes/os-volumes-post-resp.json.tpl b/nova/tests/integrated/api_samples/os-volumes/os-volumes-post-resp.json.tpl
index d13ce20..dee3bda 100644
--- a/nova/tests/integrated/api_samples/os-volumes/os-volumes-post-resp.json.tpl
+++ b/nova/tests/integrated/api_samples/os-volumes/os-volumes-post-resp.json.tpl
@@ -5,7 +5,7 @@
         "availabilityZone": "zone1:host1",
         "displayName": "%(volume_name)s",
         "attachments": [
-            { "device": "/",
+            { "device": "/dev/sdb",
               "serverId": "%(uuid)s",
               "id": "%(uuid)s",
               "volumeId": "%(uuid)s"
diff --git a/nova/tests/integrated/api_samples/os-volumes/os-volumes-post-resp.xml.tpl b/nova/tests/integrated/api_samples/os-volumes/os-volumes-post-resp.xml.tpl
index cb3c5ed..c881aaf 100644
--- a/nova/tests/integrated/api_samples/os-volumes/os-volumes-post-resp.xml.tpl
+++ b/nova/tests/integrated/api_samples/os-volumes/os-volumes-post-resp.xml.tpl
@@ -1,7 +1,7 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <volume status="in-use" displayDescription="%(volume_desc)s" availabilityZone="zone1:host1" displayName="%(volume_name)s" volumeType="Backup" snapshotId="None" id="%(uuid)s" createdAt="%(xmltime)s" size="100">
   <attachments>
-    <attachment device="/" serverId="%(uuid)s" id="%(uuid)s" volumeId="%(uuid)s"/>
+    <attachment device="/dev/sdb" serverId="%(uuid)s" id="%(uuid)s" volumeId="%(uuid)s"/>
   </attachments>
   <metadata/>
 </volume>
diff --git a/nova/tests/integrated/test_api_samples.py b/nova/tests/integrated/test_api_samples.py
index 4fa9a12..20b2461 100644
--- a/nova/tests/integrated/test_api_samples.py
+++ b/nova/tests/integrated/test_api_samples.py
@@ -4136,8 +4136,15 @@ class VolumeAttachmentsSampleJsonTest(VolumeAttachmentsSampleBase):
     def test_volume_attachment_detail(self):
         server_id = self._post_server()
         attach_id = "a26887c6-c47b-4654-abb5-dfadf7d3f803"
+        attachments = [{'device': '/dev/sdd',
+                        'serverId': server_id,
+                        'id': attach_id,
+                        'volumeId': attach_id
+                      }]
+        volume = fakes.stub_volume(attach_id, attachments=attachments)
         self._stub_db_bdms_get_all_by_instance(server_id)
         self._stub_compute_api_get()
+        self.stubs.Set(cinder.API, 'get', lambda *a, **k: volume)
         response = self._do_get('servers/%s/os-volume_attachments/%s'
                                 % (server_id, attach_id))
         subs = self._get_regexes()
@@ -4206,6 +4213,13 @@ class VolumesSampleJsonTest(ServersSampleBase):
                   'mountpoint': '/',
                   'status': 'in-use',
                   'attach_status': 'attached',
+                  'attachments': [
+                      {'device': '/dev/sdb',
+                       'serverId': '3912f2b4-c5ba-4aec-9165-872876fe202e',
+                       'id': id,
+                       'volumeId': id
+                      }
+                  ],
                   'name': 'vol name',
                   'display_name': displayname,
                   'display_description': displaydesc,
diff --git a/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-detail-resp.json.tpl b/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-detail-resp.json.tpl
index 82a63ed..3529dde 100644
--- a/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-detail-resp.json.tpl
+++ b/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-detail-resp.json.tpl
@@ -3,12 +3,13 @@
         {
             "attachments": [
                 {
-                    "device": "/",
+                    "device": "/dev/sdb",
                     "id": "%(uuid)s",
                     "serverId": "%(uuid)s",
                     "volumeId": "%(uuid)s"
                 }
             ],
+            "multiattach": "False",
             "availabilityZone": "zone1:host1",
             "createdAt": "%(strtime)s",
             "displayDescription": "%(volume_desc)s",
diff --git a/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-get-resp.json.tpl b/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-get-resp.json.tpl
index 84bfdd2..bc75dbb 100644
--- a/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-get-resp.json.tpl
+++ b/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-get-resp.json.tpl
@@ -2,12 +2,13 @@
     "volume": {
         "attachments": [
             {
-                "device": "/",
+                "device": "/dev/sdb",
                 "id": "%(uuid)s",
                 "serverId": "%(uuid)s",
                 "volumeId": "%(uuid)s"
             }
         ],
+        "multiattach": "False",
         "availabilityZone": "zone1:host1",
         "createdAt": "%(strtime)s",
         "displayDescription": "%(volume_desc)s",
diff --git a/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-index-resp.json.tpl b/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-index-resp.json.tpl
index 82a63ed..3529dde 100644
--- a/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-index-resp.json.tpl
+++ b/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-index-resp.json.tpl
@@ -3,12 +3,13 @@
         {
             "attachments": [
                 {
-                    "device": "/",
+                    "device": "/dev/sdb",
                     "id": "%(uuid)s",
                     "serverId": "%(uuid)s",
                     "volumeId": "%(uuid)s"
                 }
             ],
+            "multiattach": "False",
             "availabilityZone": "zone1:host1",
             "createdAt": "%(strtime)s",
             "displayDescription": "%(volume_desc)s",
diff --git a/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-post-resp.json.tpl b/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-post-resp.json.tpl
index d13ce20..58d8a62 100644
--- a/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-post-resp.json.tpl
+++ b/nova/tests/integrated/v3/api_samples/os-volumes/os-volumes-post-resp.json.tpl
@@ -5,12 +5,13 @@
         "availabilityZone": "zone1:host1",
         "displayName": "%(volume_name)s",
         "attachments": [
-            { "device": "/",
+            { "device": "/dev/sdb",
               "serverId": "%(uuid)s",
               "id": "%(uuid)s",
               "volumeId": "%(uuid)s"
             }
         ],
+     "multiattach": "False",
      "volumeType": "Backup",
      "snapshotId": null,
      "metadata": {},
diff --git a/nova/tests/integrated/v3/test_volumes.py b/nova/tests/integrated/v3/test_volumes.py
index 8c306ae..2a4c6f8 100644
--- a/nova/tests/integrated/v3/test_volumes.py
+++ b/nova/tests/integrated/v3/test_volumes.py
@@ -102,7 +102,16 @@ class VolumesSampleJsonTest(test_servers.ServersSampleBase):
                   'snapshot_id': None,
                   'volume_type_id': 'fakevoltype',
                   'volume_metadata': [],
-                  'volume_type': {'name': 'Backup'}
+                  'volume_type': {'name': 'Backup'},
+                  "multiattach": "False",
+                  "attachments": [
+                       {
+                           "device": "/dev/sdb",
+                           "id": "a26887c6-c47b-4654-abb5-dfadf7d3f803",
+                           "serverId": "3912f2b4-c5ba-4aec-9165-872876fe202e",
+                           "volumeId": "a26887c6-c47b-4654-abb5-dfadf7d3f803"
+                       }
+                    ]
                   }
         return volume
 
-- 
2.4.3

