From 2c250fcd5d00d39f02fb25168fb6f62752b50ff2 Mon Sep 17 00:00:00 2001
From: apporc <appleorchard2000@gmail.com>
Date: Thu, 31 Mar 2016 17:13:04 +0800
Subject: [PATCH 42/42] Move the original createImage for volume backed
 instance to createSnapshot

Change-Id: Ib7ee43546f530ddbf58cb82192bded40efbbb9ae
Signed-off-by: apporc <appleorchard2000@gmail.com>
---
 nova/api/openstack/compute/servers.py | 73 ++++++++++++++++++++++++++++++++++-
 nova/compute/api.py                   |  5 +++
 2 files changed, 77 insertions(+), 1 deletion(-)

diff --git a/nova/api/openstack/compute/servers.py b/nova/api/openstack/compute/servers.py
index 3a646ba..76dfc6e 100644
--- a/nova/api/openstack/compute/servers.py
+++ b/nova/api/openstack/compute/servers.py
@@ -1425,10 +1425,81 @@ class Controller(wsgi.Controller):
     @wsgi.response(202)
     @wsgi.serializers(xml=FullServerTemplate)
     @wsgi.deserializers(xml=ActionDeserializer)
+    @wsgi.action('createSnapshot')
+    @common.check_snapshots_enabled
+    def _action_create_snapshot(self, req, id, body):
+        """Take a snapshot for each volume of a server instance."""
+        context = req.environ['nova.context']
+        entity = body.get("createSnapshot", {})
+
+        image_name = entity.get("name")
+
+        if not image_name:
+            msg = _("createSnapshot entity requires name attribute")
+            raise exc.HTTPBadRequest(explanation=msg)
+
+        props = {}
+        metadata = entity.get('metadata', {})
+        common.check_img_metadata_properties_quota(context, metadata)
+        try:
+            props.update(metadata)
+        except ValueError:
+            msg = _("Invalid metadata")
+            raise exc.HTTPBadRequest(explanation=msg)
+
+        instance = self._get_server(context, req, id)
+
+        bdms = objects.BlockDeviceMappingList.get_by_instance_uuid(
+                    context, instance.uuid)
+        try:
+            if self.compute_api.is_volume_backed_instance(context, instance,
+                                                          bdms):
+
+                img = instance['image_ref']
+                if not img:
+                    properties = bdms.root_metadata(
+                            context, self.compute_api.image_api,
+                            self.compute_api.volume_api)
+                    image_meta = {'properties': properties}
+                else:
+                    image_meta = self.compute_api.image_api.get(context, img)
+
+                image = self.compute_api.snapshot_volume_backed(
+                                                       context,
+                                                       instance,
+                                                       image_meta,
+                                                       image_name,
+                                                       extra_properties=props)
+            else:
+                msg = _("Instance is not volume backed.")
+                raise exc.HTTPBadRequest(explanation=msg)
+
+        except exception.InstanceInvalidState as state_error:
+            common.raise_http_conflict_for_instance_invalid_state(state_error,
+                        'createSnapshot')
+        except exception.Invalid as err:
+            raise exc.HTTPBadRequest(explanation=err.format_message())
+
+        # build location of newly-created image entity
+        image_id = str(image['id'])
+        url_prefix = self._view_builder._update_glance_link_prefix(
+                req.application_url)
+        image_ref = os.path.join(url_prefix,
+                                 context.project_id,
+                                 'images',
+                                 image_id)
+
+        resp = webob.Response(status_int=202)
+        resp.headers['Location'] = image_ref
+        return resp
+
+    @wsgi.response(202)
+    @wsgi.serializers(xml=FullServerTemplate)
+    @wsgi.deserializers(xml=ActionDeserializer)
     @wsgi.action('createImage')
     @common.check_snapshots_enabled
     def _action_create_image(self, req, id, body):
-        """Snapshot a server instance."""
+        """Create an image from a server instance's root volume."""
         context = req.environ['nova.context']
         entity = body.get("createImage", {})
 
diff --git a/nova/compute/api.py b/nova/compute/api.py
index ed38809..58340a7 100644
--- a/nova/compute/api.py
+++ b/nova/compute/api.py
@@ -2172,6 +2172,11 @@ class API(base.Base):
         # hence the zero size
         image_meta['size'] = 0
 
+        # Since there may be multi disks attached to one instance, we only
+        # record the disk format for root volume.
+        if not image_meta['disk_format']:
+            image_meta['disk_format'] = image_meta['properties']['disk_format']
+
         return self.image_api.create(context, image_meta)
 
     @wrap_check_policy
-- 
2.4.3

