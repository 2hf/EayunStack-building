From c05f7d7e1e1c1fa1e030c32f4f7d9e816e6eca1b Mon Sep 17 00:00:00 2001
From: Krisztian Gacsal <krisztian.gacsal@ericsson.com>
Date: Thu, 18 Jun 2015 13:54:32 +0200
Subject: [PATCH 24/34] obj: Allow multiple volume attachments

Extend bdm object.

Partially-implements: blueprint multi-attach-volume

Related patches:

REST API changes:
https://review.openstack.org/153038

python-cinderclient:
https://review.openstack.org/#/c/85856/

cinder:
https://review.openstack.org/#/c/85847/

Change-Id: I183f56fab73f815869f47e31d6d0f9461f72b9dc
(cherry picked from commit 3151eb5c2f08df1869da9a7be5da1f9548914d1d)

Conflicts:
	nova/objects/block_device.py
	nova/tests/unit/objects/test_block_device.py
	nova/tests/unit/objects/test_objects.py
---
 nova/objects/block_device.py            | 37 +++++++++++++++++++++++++++++++--
 nova/tests/objects/test_block_device.py | 37 +++++++++++++++++++++++++++++++++
 nova/tests/objects/test_objects.py      |  4 ++--
 3 files changed, 74 insertions(+), 4 deletions(-)

diff --git a/nova/objects/block_device.py b/nova/objects/block_device.py
index d1a4b31..777bcfb 100644
--- a/nova/objects/block_device.py
+++ b/nova/objects/block_device.py
@@ -42,7 +42,14 @@ class BlockDeviceMapping(base.NovaPersistentObject, base.NovaObject):
     # Version 1.1: Add instance_uuid to get_by_volume_id method
     # Version 1.2: Instance version 1.14
     # Version 1.3: Instance version 1.15
-    VERSION = '1.3'
+    # Version 1.4: Instance version 1.16
+    # Version 1.5: Instance version 1.17
+    # Version 1.6: Instance version 1.18
+    # Version 1.7: Add update_or_create method
+    # Version 1.8: Instance version 1.19
+    # Version 1.9: Instance version 1.20
+    # Version 1.10: Add get_by_instance_and_volume_id method
+    VERSION = '1.10'
 
     fields = {
         'id': fields.IntegerField(),
@@ -165,6 +172,18 @@ class BlockDeviceMapping(base.NovaPersistentObject, base.NovaObject):
         return cls._from_db_object(context, cls(), db_bdm,
                                    expected_attrs=expected_attrs)
 
+    @base.remotable_classmethod
+    def get_by_instance_and_volume_id(cls, context, volume_id, instance_uuid,
+                                      expected_attrs=None):
+        if expected_attrs is None:
+            expected_attrs = []
+        db_bdm = db.block_device_mapping_get_by_instance_and_volume_id(
+            context, volume_id, instance_uuid, _expected_cols(expected_attrs))
+        if not db_bdm:
+            raise exception.VolumeBDMNotFound(volume_id=volume_id)
+        return cls._from_db_object(context, cls(), db_bdm,
+                                   expected_attrs=expected_attrs)
+
     @property
     def is_root(self):
         return self.boot_index == 0
@@ -205,7 +224,14 @@ class BlockDeviceMappingList(base.ObjectListBase, base.NovaObject):
     # Version 1.2: Added use_slave to get_by_instance_uuid
     # Version 1.3: BlockDeviceMapping <= version 1.2
     # Version 1.4: BlockDeviceMapping <= version 1.3
-    VERSION = '1.4'
+    # Version 1.5: BlockDeviceMapping <= version 1.4
+    # Version 1.6: BlockDeviceMapping <= version 1.5
+    # Version 1.7: BlockDeviceMapping <= version 1.6
+    # Version 1.8: BlockDeviceMapping <= version 1.7
+    # Version 1.9: BlockDeviceMapping <= version 1.8
+    # Version 1.10: BlockDeviceMapping <= version 1.9
+    # Version 1.11: BlockDeviceMapping <= version 1.10
+    VERSION = '1.11'
 
     fields = {
         'objects': fields.ListOfObjectsField('BlockDeviceMapping'),
@@ -216,6 +242,13 @@ class BlockDeviceMappingList(base.ObjectListBase, base.NovaObject):
         '1.2': '1.1',
         '1.3': '1.2',
         '1.4': '1.3',
+        '1.5': '1.4',
+        '1.6': '1.5',
+        '1.7': '1.6',
+        '1.8': '1.7',
+        '1.9': '1.8',
+        '1.10': '1.9',
+        '1.11': '1.10',
     }
 
     @base.remotable_classmethod
diff --git a/nova/tests/objects/test_block_device.py b/nova/tests/objects/test_block_device.py
index 03b7fc2..cca8cdf 100644
--- a/nova/tests/objects/test_block_device.py
+++ b/nova/tests/objects/test_block_device.py
@@ -129,6 +129,43 @@ class _TestBlockDeviceMappingObject(object):
                                               ['instance'])
         self.assertRemotes()
 
+    @mock.patch.object(db,
+                       'block_device_mapping_get_by_instance_and_volume_id')
+    def test_get_by_instance_and_volume_id(self, mock_get):
+        fake_inst = fake_instance.fake_db_instance()
+        mock_get.return_value = self.fake_bdm(fake_inst)
+
+        obj_bdm = objects.BlockDeviceMapping
+        vol_bdm = obj_bdm.get_by_instance_and_volume_id(
+            self.context, 'fake-volume-id', 'fake-instance-id')
+        for attr in block_device_obj.BLOCK_DEVICE_OPTIONAL_ATTRS:
+            self.assertFalse(vol_bdm.obj_attr_is_set(attr))
+
+    @mock.patch.object(db,
+                       'block_device_mapping_get_by_instance_and_volume_id')
+    def test_test_get_by_instance_and_volume_id_with_expected(self, mock_get):
+        fake_inst = fake_instance.fake_db_instance()
+        mock_get.return_value = self.fake_bdm(fake_inst)
+
+        obj_bdm = objects.BlockDeviceMapping
+        vol_bdm = obj_bdm.get_by_instance_and_volume_id(
+            self.context, 'fake-volume-id', fake_inst['uuid'],
+            expected_attrs=['instance'])
+        for attr in block_device_obj.BLOCK_DEVICE_OPTIONAL_ATTRS:
+            self.assertTrue(vol_bdm.obj_attr_is_set(attr))
+        mock_get.assert_called_once_with(self.context, 'fake-volume-id',
+                                         fake_inst['uuid'], ['instance'])
+
+    @mock.patch.object(db,
+                       'block_device_mapping_get_by_instance_and_volume_id')
+    def test_get_by_instance_and_volume_id_not_found(self, mock_get):
+        mock_get.return_value = None
+
+        obj_bdm = objects.BlockDeviceMapping
+        self.assertRaises(exception.VolumeBDMNotFound,
+                          obj_bdm.get_by_instance_and_volume_id,
+                          self.context, 'fake-volume-id', 'fake-instance-id')
+
     def _test_create_mocked(self, cell_type=None):
         if cell_type:
             self.flags(enable=True, cell_type=cell_type, group='cells')
diff --git a/nova/tests/objects/test_objects.py b/nova/tests/objects/test_objects.py
index 35fc5d9..8b30d72 100644
--- a/nova/tests/objects/test_objects.py
+++ b/nova/tests/objects/test_objects.py
@@ -935,8 +935,8 @@ object_data = {
     'AggregateList': '1.2-4b02a285b8612bfb86a96ff80052fb0a',
     'BandwidthUsage': '1.1-bdab751673947f0ac7de108540a1a8ce',
     'BandwidthUsageList': '1.1-76898106a9db393cd5f42c557389c507',
-    'BlockDeviceMapping': '1.3-9968ffe513e7672484b0f528b034cd0f',
-    'BlockDeviceMappingList': '1.4-388b059a9d47ce71d4e8f3cc4f4b760c',
+    'BlockDeviceMapping': '1.10-141f63124abdec4e221d7e75d24135fd',
+    'BlockDeviceMappingList': '1.11-09505e240a2c38056746cea235218d00',
     'ComputeNode': '1.5-57ce5a07c727ffab6c51723bb8dccbfe',
     'ComputeNodeList': '1.5-a1641ab314063538470d57daaa5c7831',
     'DNSDomain': '1.0-5bdc288d7c3b723ce86ede998fd5c9ba',
-- 
2.4.3

