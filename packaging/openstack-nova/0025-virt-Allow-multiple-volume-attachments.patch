From 0f5f44d18f6489515270494e2eb576f19ee32e58 Mon Sep 17 00:00:00 2001
From: Krisztian Gacsal <krisztian.gacsal@ericsson.com>
Date: Thu, 18 Jun 2015 14:05:21 +0200
Subject: [PATCH 25/34] virt: Allow multiple volume attachments

Add multiattach support to libvirt driver.

Partially-implements: blueprint multi-attach-volume

Related patches:

REST API changes:
https://review.openstack.org/153038

python-cinderclient:
https://review.openstack.org/#/c/85856/

cinder:
https://review.openstack.org/#/c/85847/

Change-Id: Ib78fcd7c54c966dcbc143165a262e582bbda0901
(cherry picked from commit 0e2ee84d9126b9099c1c623e39456bc73a4e2b8c)

Conflicts:
	nova/tests/unit/virt/libvirt/test_driver.py
	nova/virt/block_device.py
	nova/virt/libvirt/driver.py
	nova/virt/libvirt/volume.py
---
 nova/tests/virt/libvirt/test_driver.py | 15 +++++++++------
 nova/virt/block_device.py              | 18 ++++++++++--------
 nova/virt/libvirt/config.py            |  4 ++++
 nova/virt/libvirt/driver.py            | 14 ++++++++++++--
 nova/virt/libvirt/volume.py            |  2 ++
 5 files changed, 37 insertions(+), 16 deletions(-)

diff --git a/nova/tests/virt/libvirt/test_driver.py b/nova/tests/virt/libvirt/test_driver.py
index ec7203d..6920b4c 100644
--- a/nova/tests/virt/libvirt/test_driver.py
+++ b/nova/tests/virt/libvirt/test_driver.py
@@ -12754,9 +12754,11 @@ class LibvirtVolumeSnapshotTestCase(test.TestCase):
     @mock.patch('nova.virt.block_device.DriverVolumeBlockDevice.'
                 'refresh_connection_info')
     @mock.patch('nova.objects.block_device.BlockDeviceMapping.'
-                'get_by_volume_id')
-    def test_volume_refresh_connection_info(self, mock_get_by_volume_id,
+                'get_by_instance_and_volume_id')
+    def test_volume_refresh_connection_info(self,
+                                            mock_get_by_instance_and_volume_id,
                                             mock_refresh_connection_info):
+        instance = objects.Instance(**self.inst)
         fake_bdm = fake_block_device.FakeDbBlockDeviceDict({
             'id': 123,
             'instance_uuid': 'fake-instance',
@@ -12765,13 +12767,14 @@ class LibvirtVolumeSnapshotTestCase(test.TestCase):
             'destination_type': 'volume',
             'volume_id': 'fake-volume-id-1',
             'connection_info': '{"fake": "connection_info"}'})
-        mock_get_by_volume_id.return_value = fake_bdm
+        mock_get_by_instance_and_volume_id.return_value = fake_bdm
 
-        self.conn._volume_refresh_connection_info(self.c, self.inst,
+        self.conn._volume_refresh_connection_info(self.c, instance,
                                                   self.volume_uuid)
 
-        mock_get_by_volume_id.assert_called_once_with(self.c, self.volume_uuid)
-        mock_refresh_connection_info.assert_called_once_with(self.c, self.inst,
+        mock_get_by_instance_and_volume_id.assert_called_once_with(
+            self.c, self.volume_uuid, instance.uuid)
+        mock_refresh_connection_info.assert_called_once_with(self.c, instance,
             self.conn._volume_api, self.conn)
 
     def test_volume_snapshot_create(self, quiesce=True):
diff --git a/nova/virt/block_device.py b/nova/virt/block_device.py
index 773cc50..482e9cd 100644
--- a/nova/virt/block_device.py
+++ b/nova/virt/block_device.py
@@ -235,6 +235,9 @@ class DriverVolumeBlockDevice(DriverBlockDevice):
             connection_info['serial'] = self.volume_id
         self._preserve_multipath_id(connection_info)
 
+        if volume.get('multiattach', False):
+            connection_info['multiattach'] = True
+
         # If do_driver_attach is False, we will attach a volume to an instance
         # at boot time. So actual attach is done by instance creation code.
         if do_driver_attach:
@@ -260,14 +263,13 @@ class DriverVolumeBlockDevice(DriverBlockDevice):
         mode = 'rw'
         if 'data' in connection_info:
             mode = connection_info['data'].get('access_mode', 'rw')
-        if volume['attach_status'] == "detached":
-            # NOTE(mriedem): save our current state so connection_info is in
-            # the database before the volume status goes to 'in-use' because
-            # after that we can detach and connection_info is required for
-            # detach.
-            self.save()
-            volume_api.attach(context, volume_id, instance.uuid,
-                              self['mount_device'], mode=mode)
+        # NOTE(mriedem): save our current state so connection_info is in
+        # the database before the volume status goes to 'in-use' because
+        # after that we can detach and connection_info is required for
+        # detach.
+        self.save()
+        volume_api.attach(context, volume_id, instance.uuid,
+                          self['mount_device'], mode=mode)
 
     @update_db
     def refresh_connection_info(self, context, instance,
diff --git a/nova/virt/libvirt/config.py b/nova/virt/libvirt/config.py
index 7c02977..7dca182 100644
--- a/nova/virt/libvirt/config.py
+++ b/nova/virt/libvirt/config.py
@@ -690,6 +690,7 @@ class LibvirtConfigGuestDisk(LibvirtConfigGuestDevice):
         self.logical_block_size = None
         self.physical_block_size = None
         self.readonly = False
+        self.shareable = False
         self.snapshot = None
         self.backing_store = None
 
@@ -792,6 +793,9 @@ class LibvirtConfigGuestDisk(LibvirtConfigGuestDevice):
         if self.readonly:
             dev.append(etree.Element("readonly"))
 
+        if self.shareable:
+            dev.append(etree.Element("shareable"))
+
         return dev
 
     def parse_dom(self, xmldoc):
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 4cc2f94..1988505 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -1476,6 +1476,14 @@ class LibvirtDriver(driver.ComputeDriver):
             self._disconnect_volume(new_connection_info, disk_dev)
             raise NotImplementedError(_("Swap only supports host devices"))
 
+        # Save updates made in connection_info when connect_volume was called
+        volume_id = new_connection_info.get('serial')
+        bdm = objects.BlockDeviceMapping.get_by_instance_and_volume_id(
+            nova_context.get_admin_context(), volume_id, instance.uuid)
+        driver_bdm = driver_block_device.DriverVolumeBlockDevice(bdm)
+        driver_bdm['connection_info'] = new_connection_info
+        driver_bdm.save()
+
         self._swap_volume(virt_dom, disk_dev, conf.source_path, resize_to)
         self._disconnect_volume(old_connection_info, disk_dev)
 
@@ -1977,8 +1985,10 @@ class LibvirtDriver(driver.ComputeDriver):
             raise
 
     def _volume_refresh_connection_info(self, context, instance, volume_id):
-        bdm = objects.BlockDeviceMapping.get_by_volume_id(context,
-                                                          volume_id)
+        bdm_cls = objects.BlockDeviceMapping
+        bdm = bdm_cls.get_by_instance_and_volume_id(context,
+                                                    volume_id,
+                                                    instance.uuid)
         driver_bdm = driver_block_device.DriverVolumeBlockDevice(bdm)
         driver_bdm.refresh_connection_info(context, instance,
                                            self._volume_api, self)
diff --git a/nova/virt/libvirt/volume.py b/nova/virt/libvirt/volume.py
index a8913c1..0c8c4d3 100644
--- a/nova/virt/libvirt/volume.py
+++ b/nova/virt/libvirt/volume.py
@@ -265,6 +265,8 @@ class LibvirtISCSIVolumeDriver(LibvirtBaseVolumeDriver):
                      self).get_config(connection_info, disk_info)
         conf.source_type = "block"
         conf.source_path = connection_info['data']['host_device']
+        if connection_info.get('multiattach', False):
+            conf.shareable = True
         return conf
 
     @utils.synchronized('connect_volume')
-- 
2.4.3

