From bdf405a1bcdfb6edb390b3a85d8cde7800f9ca4f Mon Sep 17 00:00:00 2001
From: Hunt Xu <mhuntxu@gmail.com>
Date: Fri, 16 Dec 2016 18:41:15 +0800
Subject: [PATCH 77/99] Sync #66 from devel to testing

iptables_firewall: add firewall rules to meter instance port stats

Fixes: redmine #9154

Signed-off-by: Hunt Xu <mhuntxu@gmail.com>
(cherry picked from commit deaf408362e2fd11d6870e1118c12d5429fcf323)
Signed-off-by: Hunt Xu <mhuntxu@gmail.com>

Change-Id: I5458f06fdf7782c7d8cb63b8e59e2f727d7b2aca
Signed-off-by: Hunt Xu <mhuntxu@gmail.com>
---
 neutron/agent/linux/iptables_firewall.py | 73 +++++++++++++++++++++++++++++---
 1 file changed, 67 insertions(+), 6 deletions(-)

diff --git a/neutron/agent/linux/iptables_firewall.py b/neutron/agent/linux/iptables_firewall.py
index 6afa0a466..9aa7520c2 100644
--- a/neutron/agent/linux/iptables_firewall.py
+++ b/neutron/agent/linux/iptables_firewall.py
@@ -134,6 +134,8 @@ class IptablesFirewallDriver(firewall.FirewallDriver):
             self._remove_chain(port, INGRESS_DIRECTION)
             self._remove_chain(port, EGRESS_DIRECTION)
             self._remove_chain(port, SPOOF_FILTER)
+            self._remove_metering_chains(port, INGRESS_DIRECTION)
+            self._remove_metering_chains(port, EGRESS_DIRECTION)
         self._remove_chain_by_name_v4v6(SG_CHAIN)
 
     def _setup_chain(self, port, DIRECTION):
@@ -168,9 +170,53 @@ class IptablesFirewallDriver(firewall.FirewallDriver):
     def _get_device_name(self, port):
         return port['device']
 
+    def _setup_metering_chains(self, port, direction, chain_name):
+        if not port['device_owner'].startswith('compute:'):
+            # Only meter instances' ports
+            return '$' + chain_name
+        # Only support IPv4
+        PRIVATE_INTERNET_ADDRESSES = [
+            '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16',
+            '169.254.169.254/32']
+        METER_IPADDR_DIRECTION = {INGRESS_DIRECTION: 's',
+                                  EGRESS_DIRECTION: 'd'}
+        chains = self._metering_chain_names(port, direction)
+        for m_chain_name in chains:
+            self.iptables.ipv4['filter'].add_chain(m_chain_name, wrap=False)
+
+        metering_chain, counting_in_chain, counting_chain = chains
+        # Jump to the original security group chain
+        orig_chain_name = self.iptables.ipv4['filter']._wrap_target_chain(
+            '$' + chain_name, True)
+        jump_rule = '-j %s' % orig_chain_name
+        self.iptables.ipv4['filter'].add_rule(metering_chain, jump_rule,
+                                              wrap=False)
+        # Jump to the counting chain
+        counting_rules = ['-%s %s -j %s' % (METER_IPADDR_DIRECTION[direction],
+                                            private_address,
+                                            counting_in_chain)
+                          for private_address in PRIVATE_INTERNET_ADDRESSES]
+        counting_rules += ['-j %s' % counting_chain]
+        for rule in counting_rules:
+            self.iptables.ipv4['filter'].add_rule(metering_chain, rule,
+                                                  wrap=False)
+        # Count the counting chain
+        self.iptables.ipv4['filter'].add_rule(counting_in_chain, '',
+                                              wrap=False)
+        self.iptables.ipv4['filter'].add_rule(counting_chain, '',
+                                              wrap=False)
+        return metering_chain
+
+    def _remove_metering_chains(self, port, direction):
+        for m_chain_name in self._metering_chain_names(port, direction):
+            self.iptables.ipv4['filter'].ensure_remove_chain(
+                m_chain_name, wrap=False)
+
     def _add_chain(self, port, direction):
         chain_name = self._port_chain_name(port, direction)
         self._add_chain_by_name_v4v6(chain_name)
+        metering_chain_name = self._setup_metering_chains(
+            port, direction, chain_name)
 
         # Note(nati) jump to the security group chain (SG_CHAIN)
         # This is needed because the packet may much two rule in port
@@ -186,14 +232,15 @@ class IptablesFirewallDriver(firewall.FirewallDriver):
         self._add_rule_to_chain_v4v6('FORWARD', jump_rule, jump_rule)
 
         # jump to the chain based on the device
-        jump_rule = ['-m physdev --%s %s --physdev-is-bridged '
-                     '-j $%s' % (self.IPTABLES_DIRECTION[direction],
-                                 device,
-                                 chain_name)]
-        self._add_rule_to_chain_v4v6(SG_CHAIN, jump_rule, jump_rule)
+        jump_rules = [
+            ['-m physdev --%s %s --physdev-is-bridged -j %s' % (
+                self.IPTABLES_DIRECTION[direction], device, j_chain_name)
+            ]
+            for j_chain_name in (metering_chain_name, '$' + chain_name)]
+        self._add_rule_to_chain_v4v6(SG_CHAIN, *jump_rules)
 
         if direction == EGRESS_DIRECTION:
-            self._add_rule_to_chain_v4v6('INPUT', jump_rule, jump_rule)
+            self._add_rule_to_chain_v4v6('INPUT', *jump_rules)
 
     def _split_sgr_by_ethertype(self, security_group_rules):
         ipv4_sg_rules = []
@@ -509,6 +556,13 @@ class IptablesFirewallDriver(firewall.FirewallDriver):
         return iptables_manager.get_chain_name(
             '%s%s' % (CHAIN_NAME_PREFIX[direction], port['device'][3:]))
 
+    def _metering_chain_names(self, port, direction):
+        return [
+            iptables_manager.get_chain_name(
+                '%s%s' % (prefix + direction + '-', port['device'][3:]),
+                wrap=False
+            ) for prefix in ('metering-', 'counting-in-', 'counting-')]
+
     def filter_defer_apply_on(self):
         if not self._defer_apply:
             self.iptables.defer_apply_on()
@@ -566,5 +620,12 @@ class OVSHybridIptablesFirewallDriver(IptablesFirewallDriver):
         return iptables_manager.get_chain_name(
             '%s%s' % (CHAIN_NAME_PREFIX[direction], port['device']))
 
+    def _metering_chain_names(self, port, direction):
+        return [
+            iptables_manager.get_chain_name(
+                '%s%s' % (prefix + direction + '-', port['device']),
+                wrap=False
+            ) for prefix in ('metering-', 'counting-in-', 'counting-')]
+
     def _get_device_name(self, port):
         return (self.OVS_HYBRID_TAP_PREFIX + port['device'])[:LINUX_DEV_LEN]
-- 
2.13.0

