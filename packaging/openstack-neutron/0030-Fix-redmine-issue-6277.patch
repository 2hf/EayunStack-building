From c4c86a3bdb8e132f0e7434e519d78d918615e428 Mon Sep 17 00:00:00 2001
From: huntxu <mhuntxu@gmail.com>
Date: Mon, 14 Mar 2016 13:36:01 +0800
Subject: [PATCH 30/33] Fix redmine issue 6277

Signed-off-by: huntxu <mhuntxu@gmail.com>
---
 neutron/agent/linux/iptables_manager.py            |  9 ++++-
 neutron/db/metering/metering_db.py                 |  6 ++-
 neutron/services/metering/agents/metering_agent.py | 21 ++++++++---
 .../unit/services/metering/test_metering_agent.py  | 43 ++++++++++++++++++++++
 4 files changed, 70 insertions(+), 9 deletions(-)

diff --git a/neutron/agent/linux/iptables_manager.py b/neutron/agent/linux/iptables_manager.py
index a3f2459..2c355be 100644
--- a/neutron/agent/linux/iptables_manager.py
+++ b/neutron/agent/linux/iptables_manager.py
@@ -50,6 +50,7 @@ MAX_CHAIN_LEN_NOWRAP = 28
 # a failure during iptables-restore
 IPTABLES_ERROR_LINES_OF_CONTEXT = 5
 
+NETNS_RUN_DIR = '/var/run/netns'
 
 def get_chain_name(chain_name, wrap=True):
     if wrap:
@@ -280,13 +281,19 @@ class IptablesManager(object):
 
     """
 
+    def _execute(self, *args, **kwargs):
+        ns = self.namespace
+        if ns and not os.path.isfile(os.path.join(NETNS_RUN_DIR, ns)):
+            return ""
+        return linux_utils.execute(*args, **kwargs)
+
     def __init__(self, _execute=None, state_less=False,
                  root_helper=None, use_ipv6=False, namespace=None,
                  binary_name=binary_name):
         if _execute:
             self.execute = _execute
         else:
-            self.execute = linux_utils.execute
+            self.execute = self._execute
 
         self.use_ipv6 = use_ipv6
         self.root_helper = root_helper
diff --git a/neutron/db/metering/metering_db.py b/neutron/db/metering/metering_db.py
index 0e414a5..cf5057b 100644
--- a/neutron/db/metering/metering_db.py
+++ b/neutron/db/metering/metering_db.py
@@ -208,7 +208,7 @@ class MeteringDbMixin(metering.MeteringPluginBase,
 
         return res
 
-    def _process_sync_metering_data(self, context, labels):
+    def _process_sync_metering_data(self, context, labels, router_ids):
         all_routers = None
 
         routers_dict = {}
@@ -222,6 +222,8 @@ class MeteringDbMixin(metering.MeteringPluginBase,
                 routers = label.routers
 
             for router in routers:
+                if router_ids and router['id'] not in router_ids:
+                    continue
                 router_dict = routers_dict.get(
                     router['id'],
                     self._make_router_dict(router))
@@ -244,4 +246,4 @@ class MeteringDbMixin(metering.MeteringPluginBase,
             labels = (labels.join(MeteringLabel.routers).
                       filter(l3_db.Router.id.in_(router_ids)))
 
-        return self._process_sync_metering_data(context, labels)
+        return self._process_sync_metering_data(context, labels, router_ids)
diff --git a/neutron/services/metering/agents/metering_agent.py b/neutron/services/metering/agents/metering_agent.py
index c860bdb..cfc51b9 100644
--- a/neutron/services/metering/agents/metering_agent.py
+++ b/neutron/services/metering/agents/metering_agent.py
@@ -77,7 +77,6 @@ class MeteringAgent(MeteringPluginRpc, manager.Manager):
         self._load_drivers()
         self.root_helper = config.get_root_helper(self.conf)
         self.context = context.get_admin_context_without_session()
-        self.metering_info = {}
         self.metering_loop = loopingcall.FixedIntervalLoopingCall(
             self._metering_loop
         )
@@ -118,11 +117,13 @@ class MeteringAgent(MeteringPluginRpc, manager.Manager):
             info['time'] = 0
 
     def _purge_metering_info(self):
-        ts = int(time.time())
-        report_interval = self.conf.report_interval
-        for label_id, info in self.metering_info.items():
-            if info['last_update'] > ts + report_interval:
-                del self.metering_info[label_id]
+        deadline_timestamp = int(time.time()) - self.conf.report_interval
+        label_ids = [
+            label_id
+            for label_id, info in self.metering_infos.items()
+            if info['last_update'] < deadline_timestamp]
+        for label_id in label_ids:
+            del self.metering_infos[label_id]
 
     def _add_metering_info(self, label_id, pkts, bytes):
         ts = int(time.time())
@@ -185,6 +186,14 @@ class MeteringAgent(MeteringPluginRpc, manager.Manager):
     @periodic_task.periodic_task(run_immediately=True)
     def _sync_routers_task(self, context):
         routers = self._get_sync_data_metering(self.context)
+
+        routers_on_agent = set(self.routers.keys())
+        routers_on_server = set([router['id'] for router in routers])
+
+        for router_id in routers_on_agent - routers_on_server:
+            del self.routers[router_id]
+            self._invoke_driver(context, router_id, 'remove_router')
+
         if not routers:
             return
         self._update_routers(context, routers)
diff --git a/neutron/tests/unit/services/metering/test_metering_agent.py b/neutron/tests/unit/services/metering/test_metering_agent.py
index aee7f2c..78af8e6 100644
--- a/neutron/tests/unit/services/metering/test_metering_agent.py
+++ b/neutron/tests/unit/services/metering/test_metering_agent.py
@@ -125,6 +125,49 @@ class TestMeteringOperations(base.BaseTestCase,
 
         self.agent._add_metering_info.assert_called_with(label_id, 44, 222)
 
+    @mock.patch('time.time')
+    def _test_purge_metering_info(self, current_timestamp, is_empty,
+                                  mock_time):
+        mock_time.return_value = current_timestamp
+        self.agent.metering_infos = {'fake': {'last_update': 1}}
+        self.config(report_interval=1)
+
+        self.agent._purge_metering_info()
+        self.assertEqual(0 if is_empty else 1, len(self.agent.metering_infos))
+        self.assertEqual(1, mock_time.call_count)
+
+    def test_purge_metering_info(self):
+        # 1 < 2 - 1 -> False
+        self._test_purge_metering_info(2, False)
+
+    def test_purge_metering_info_delete(self):
+        # 1 < 3 - 1 -> False
+        self._test_purge_metering_info(3, True)
+
+    @mock.patch('time.time')
+    def _test_add_metering_info(self, expected_info, current_timestamp,
+                                mock_time):
+        mock_time.return_value = current_timestamp
+        actual_info = self.agent._add_metering_info('fake_label_id', 1, 1)
+        self.assertEqual(1, len(self.agent.metering_infos))
+        self.assertEqual(expected_info, actual_info)
+        self.assertEqual(expected_info,
+                         self.agent.metering_infos['fake_label_id'])
+        self.assertEqual(1, mock_time.call_count)
+
+    def test_add_metering_info_create(self):
+        expected_info = {'bytes': 1, 'pkts': 1, 'time': 0, 'first_update': 1,
+                         'last_update': 1}
+        self._test_add_metering_info(expected_info, 1)
+
+    def test_add_metering_info_update(self):
+        expected_info = {'bytes': 1, 'pkts': 1, 'time': 0, 'first_update': 1,
+                         'last_update': 1}
+        self.agent.metering_infos = {'fake_label_id': expected_info}
+        expected_info.update({'bytes': 2, 'pkts': 2, 'time': 1,
+                              'last_update': 2})
+        self._test_add_metering_info(expected_info, 2)
+
 
 class TestMeteringDriver(base.BaseTestCase):
     def setUp(self):
-- 
2.7.3

