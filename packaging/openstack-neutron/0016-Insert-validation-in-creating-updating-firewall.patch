From f7d5afa8ec672c401dffb059ae8c513f5bc79736 Mon Sep 17 00:00:00 2001
From: huntxu <mhuntxu@gmail.com>
Date: Wed, 14 Oct 2015 22:48:49 +0800
Subject: [PATCH 16/25] Insert validation in creating/updating firewall

This commit adds the validation when creating/updating the firewall.
It checks the "firewall_policy_id" is referable or not
by a tenant user.

Closes-Bug:  #1408236
Depends-On: Id8dc8cff87ca658e86c192b8da047f0c62989a4e
Change-Id: I836d89d077ca25631269604d944485d100281411

Validate tenant_id between firewall and firewall-policy

This change ensures that on firewall create/update, the
firewall-policy (if provided) is shared, or belongs to firewall tenant.

Change-Id: I71f0bd3f07609f0e4c13f3e717f750fdefd21e05
Closes-Bug: #1446074

Base on two upstream patches.

Fixes: redmine #5360

Signed-off-by: huntxu <mhuntxu@gmail.com>
---
 neutron/db/firewall/firewall_db.py                 |  13 +-
 neutron/extensions/firewall.py                     |  11 ++
 neutron/tests/unit/db/firewall/test_db_firewall.py | 147 +++++++++++++++++++--
 .../unit/services/firewall/test_fwaas_plugin.py    |  47 +++++++
 4 files changed, 206 insertions(+), 12 deletions(-)

diff --git a/neutron/db/firewall/firewall_db.py b/neutron/db/firewall/firewall_db.py
index 7321d1d..cdc1537 100644
--- a/neutron/db/firewall/firewall_db.py
+++ b/neutron/db/firewall/firewall_db.py
@@ -256,6 +256,14 @@ class Firewall_db_mixin(firewall.FirewallPluginBase, base_db.CommonDbMixin):
         else:
             return '%d:%d' % (min_port, max_port)
 
+    def _validate_fw_parameters(self, context, fw, fw_tenant_id):
+        if 'firewall_policy_id' not in fw:
+            return
+        fwp_id = fw['firewall_policy_id']
+        fwp = self._get_firewall_policy(context, fwp_id)
+        if fw_tenant_id != fwp['tenant_id'] and not fwp['shared']:
+            raise firewall.FirewallPolicyConflict(firewall_policy_id=fwp_id)
+
     def _validate_fwr_protocol_parameters(self, fwr):
         protocol = fwr['protocol']
         if protocol not in (const.TCP, const.UDP):
@@ -273,6 +281,7 @@ class Firewall_db_mixin(firewall.FirewallPluginBase, base_db.CommonDbMixin):
         status = (const.CREATED
             if cfg.CONF.router_distributed else const.PENDING_CREATE)
         with context.session.begin(subtransactions=True):
+            self._validate_fw_parameters(context, fw, tenant_id)
             firewall_db = Firewall(id=uuidutils.generate_uuid(),
                                    tenant_id=tenant_id,
                                    name=fw['name'],
@@ -288,6 +297,8 @@ class Firewall_db_mixin(firewall.FirewallPluginBase, base_db.CommonDbMixin):
         LOG.debug(_("update_firewall() called"))
         fw = firewall['firewall']
         with context.session.begin(subtransactions=True):
+            fw_db = self.get_firewall(context, id)
+            self._validate_fw_parameters(context, fw, fw_db['tenant_id'])
             count = context.session.query(Firewall).filter_by(id=id).update(fw)
             if not count:
                 raise firewall.FirewallNotFound(firewall_id=id)
@@ -383,7 +394,7 @@ class Firewall_db_mixin(firewall.FirewallPluginBase, base_db.CommonDbMixin):
         self._validate_fwr_protocol_parameters(fwr)
         tenant_id = self._get_tenant_id_for_create(context, fwr)
         if not fwr['protocol'] and (fwr['source_port'] or
-                fwr['destination_port']):
+           fwr['destination_port']):
             raise firewall.FirewallRuleWithPortWithoutProtocolInvalid()
         src_port_min, src_port_max = self._get_min_max_ports_from_range(
             fwr['source_port'])
diff --git a/neutron/extensions/firewall.py b/neutron/extensions/firewall.py
index 3ae5bc7..dbf9215 100644
--- a/neutron/extensions/firewall.py
+++ b/neutron/extensions/firewall.py
@@ -52,6 +52,17 @@ class FirewallPolicyInUse(qexception.InUse):
     message = _("Firewall Policy %(firewall_policy_id)s is being used.")
 
 
+class FirewallPolicyConflict(qexception.Conflict):
+    """FWaaS exception for firewall policy
+
+    Occurs when admin policy tries to use another tenant's unshared
+    policy.
+    """
+    message = _("Operation cannot be performed since Firewall Policy "
+                "%(firewall_policy_id)s is not shared and does not belong to "
+                "your tenant.")
+
+
 class FirewallRuleSharingConflict(qexception.Conflict):
 
     """FWaaS exception for firewall rules
diff --git a/neutron/tests/unit/db/firewall/test_db_firewall.py b/neutron/tests/unit/db/firewall/test_db_firewall.py
index 0dd6f42..abd0f58 100644
--- a/neutron/tests/unit/db/firewall/test_db_firewall.py
+++ b/neutron/tests/unit/db/firewall/test_db_firewall.py
@@ -139,8 +139,8 @@ class FirewallPluginDbTestCase(test_db_plugin.NeutronDbPluginV2TestCase):
                  'audited': audited}
         return attrs
 
-    def _get_test_firewall_attrs(
-        self, name='firewall_1', status='PENDING_CREATE'):
+    def _get_test_firewall_attrs(self, name='firewall_1',
+                                 status='PENDING_CREATE'):
         attrs = {'name': name,
                  'tenant_id': self._tenant_id,
                  'admin_state_up': ADMIN_STATE_UP,
@@ -245,13 +245,25 @@ class FirewallPluginDbTestCase(test_db_plugin.NeutronDbPluginV2TestCase):
                          admin_state_up=True, expected_res_status=None,
                          **kwargs):
         tenant_id = kwargs.get('tenant_id', self._tenant_id)
+        if firewall_policy_id is None:
+            res = self._create_firewall_policy(fmt, 'fwp',
+                                               description=DESCRIPTION,
+                                               shared=True,
+                                               firewall_rules=[],
+                                               tenant_id=tenant_id,
+                                               audited=AUDITED)
+            firewall_policy = self.deserialize(fmt or self.fmt, res)
+            firewall_policy_id = firewall_policy["firewall_policy"]["id"]
         data = {'firewall': {'name': name,
                              'description': description,
                              'firewall_policy_id': firewall_policy_id,
-                             'admin_state_up': admin_state_up,
-                             'tenant_id': tenant_id}}
+                             'admin_state_up': admin_state_up}}
+        ctx = kwargs.get('context', None)
+        if ctx is None or ctx.is_admin:
+            data['firewall'].update({'tenant_id': tenant_id})
 
-        firewall_req = self.new_create_request('firewalls', data, fmt)
+        firewall_req = self.new_create_request('firewalls', data, fmt,
+                                               context=ctx)
         firewall_res = firewall_req.get_response(self.ext_api)
         if expected_res_status:
             self.assertEqual(firewall_res.status_int, expected_res_status)
@@ -526,9 +538,9 @@ class TestFirewallDBPlugin(FirewallPluginDbTestCase):
                 req = self.new_update_request('firewall_policies', data,
                                               fwp['firewall_policy']['id'])
                 res = req.get_response(self.ext_api)
-                #check that the firewall_rule was not found
+                # check that the firewall_rule was not found
                 self.assertEqual(res.status_int, 404)
-                #check if none of the rules got added to the policy
+                # check if none of the rules got added to the policy
                 req = self.new_show_request('firewall_policies',
                                             fwp['firewall_policy']['id'],
                                             fmt=self.fmt)
@@ -902,6 +914,52 @@ class TestFirewallDBPlugin(FirewallPluginDbTestCase):
         attrs = self._get_test_firewall_attrs("firewall1", "CREATED")
         self._test_create_firewall(attrs)
 
+    def test_create_firewall_with_fwp_does_not_exist(self):
+        fmt = self.fmt
+        fw_name = "firewall1"
+        description = "my_firewall1"
+        not_found_fwp_id = uuidutils.generate_uuid()
+        self._create_firewall(fmt, fw_name,
+                              description, not_found_fwp_id,
+                              ADMIN_STATE_UP,
+                              expected_res_status=404)
+
+    def test_create_firewall_with_fwp_not_found_on_different_tenant(self):
+        fmt = self.fmt
+        fw_name = "firewall1"
+        description = "my_firewall1"
+        with self.firewall_policy(shared=False, tenant_id='tenant2') as fwp:
+            fwp_id = fwp['firewall_policy']['id']
+            ctx = context.Context('not_admin', 'tenant1')
+            self._create_firewall(fmt, fw_name,
+                                  description, fwp_id,
+                                  context=ctx,
+                                  expected_res_status=404)
+
+    def test_create_firewall_with_admin_and_fwp_different_tenant(self):
+        fmt = self.fmt
+        fw_name = "firewall1"
+        description = "my_firewall1"
+        with self.firewall_policy(shared=False, tenant_id='tenant2') as fwp:
+            fwp_id = fwp['firewall_policy']['id']
+            ctx = context.get_admin_context()
+            self._create_firewall(fmt, fw_name,
+                                  description, fwp_id,
+                                  tenant_id="admin-tenant",
+                                  context=ctx,
+                                  expected_res_status=409)
+
+    def test_create_firewall_with_admin_and_fwp_is_shared(self):
+        fw_name = "fw_with_shared_fwp"
+        with self.firewall_policy(tenant_id="tenantX") as fwp:
+            fwp_id = fwp['firewall_policy']['id']
+            ctx = context.get_admin_context()
+            target_tenant = 'tenant1'
+            with self.firewall(name=fw_name, firewall_policy_id=fwp_id,
+                               tenant_id=target_tenant, context=ctx,
+                               admin_state_up=ADMIN_STATE_UP) as fw:
+                self.assertEqual(fw['firewall']['tenant_id'], target_tenant)
+
     def test_show_firewall(self):
         name = "firewall1"
         attrs = self._get_test_firewall_attrs(name)
@@ -954,6 +1012,73 @@ class TestFirewallDBPlugin(FirewallPluginDbTestCase):
                 for k, v in attrs.iteritems():
                     self.assertEqual(res['firewall'][k], v)
 
+    def test_update_firewall_with_fwp(self):
+        ctx = context.Context('not_admin', 'tenant1')
+        with self.firewall_policy() as fwp1, \
+                self.firewall_policy(
+                    tenant_id='tenant1', shared=False) as fwp2, \
+                self.firewall(firewall_policy_id=fwp1['firewall_policy']['id'],
+                              context=ctx) as fw:
+            fw_id = fw['firewall']['id']
+            fwp2_id = fwp2['firewall_policy']['id']
+            data = {'firewall': {'firewall_policy_id': fwp2_id}}
+            req = self.new_update_request('firewalls', data, fw_id,
+                                          context=ctx)
+            res = req.get_response(self.ext_api)
+            self.assertEqual(200, res.status_int)
+
+    def test_update_firewall_with_shared_fwp(self):
+        ctx = context.Context('not_admin', 'tenant1')
+        with self.firewall_policy() as fwp1, \
+                self.firewall_policy(tenant_id='tenant2') as fwp2, \
+                self.firewall(firewall_policy_id=fwp1['firewall_policy']['id'],
+                              context=ctx) as fw:
+            fw_id = fw['firewall']['id']
+            fwp2_id = fwp2['firewall_policy']['id']
+            data = {'firewall': {'firewall_policy_id': fwp2_id}}
+            req = self.new_update_request('firewalls', data, fw_id,
+                                          context=ctx)
+            res = req.get_response(self.ext_api)
+            self.assertEqual(200, res.status_int)
+
+    def test_update_firewall_with_admin_and_fwp_different_tenant(self):
+        ctx = context.get_admin_context()
+        with self.firewall_policy() as fwp1, \
+                self.firewall_policy(
+                    tenant_id='tenant2', shared=False) as fwp2, \
+                self.firewall(firewall_policy_id=fwp1['firewall_policy']['id'],
+                              context=ctx) as fw:
+            fw_id = fw['firewall']['id']
+            fwp2_id = fwp2['firewall_policy']['id']
+            data = {'firewall': {'firewall_policy_id': fwp2_id}}
+            req = self.new_update_request('firewalls', data, fw_id,
+                                          context=ctx)
+            res = req.get_response(self.ext_api)
+            self.assertEqual(409, res.status_int)
+
+    def test_update_firewall_fwp_not_found_on_different_tenant(self):
+        with contextlib.nested(self.firewall_policy(name='fwp1',
+                                                    tenant_id='tenant1',
+                                                    do_delete=False),
+                               self.firewall_policy(name='fwp2', shared=False,
+                                                    tenant_id='tenant2')
+                               ) as fwps:
+            # create firewall using fwp1 exists the same tenant.
+            fwp1_id = fwps[0]['firewall_policy']['id']
+            fwp2_id = fwps[1]['firewall_policy']['id']
+            ctx = context.Context('not_admin', 'tenant1')
+            with self.firewall(firewall_policy_id=fwp1_id,
+                               context=ctx) as firewall:
+                fw_id = firewall['firewall']['id']
+                fw_db = self.plugin._get_firewall(ctx, fw_id)
+                fw_db['status'] = constants.ACTIVE
+                # update firewall from fwp1 to fwp2(different tenant)
+                data = {'firewall': {'firewall_policy_id': fwp2_id}}
+                req = self.new_update_request('firewalls', data, fw_id,
+                                              context=ctx)
+                res = req.get_response(self.ext_api)
+                self.assertEqual(res.status_int, 404)
+
     def test_delete_firewall(self):
         ctx = context.get_admin_context()
         with self.firewall_policy() as fwp:
@@ -1064,15 +1189,15 @@ class TestFirewallDBPlugin(FirewallPluginDbTestCase):
                     self.firewall_policy(name='fwp1',
                                          firewall_rules=[fwr1_id])) as fwp:
                 fwp0_id = fwp[0]['firewall_policy']['id']
-                #test inserting before a rule which is associated
-                #with different policy
+                # test inserting before a rule which is associated
+                # with different policy
                 self._rule_action(
                     'insert', fwp0_id, fwr0_id,
                     insert_before=fwr1_id,
                     expected_code=webob.exc.HTTPBadRequest.code,
                     expected_body=None)
-                #test inserting  after a rule which is associated
-                #with different policy
+                # test inserting  after a rule which is associated
+                # with different policy
                 self._rule_action(
                     'insert', fwp0_id, fwr0_id,
                     insert_after=fwr1_id,
diff --git a/neutron/tests/unit/services/firewall/test_fwaas_plugin.py b/neutron/tests/unit/services/firewall/test_fwaas_plugin.py
index f1278a8..b735584 100644
--- a/neutron/tests/unit/services/firewall/test_fwaas_plugin.py
+++ b/neutron/tests/unit/services/firewall/test_fwaas_plugin.py
@@ -393,3 +393,50 @@ class TestFirewallPluginBase(test_db_firewall.TestFirewallDBPlugin):
                                description='fw') as fwalls:
                 self._test_list_resources('firewall', [fwalls],
                                           query_params='description=fw')
+
+    def test_update_firewall_with_fwp(self):
+        ctx = context.get_admin_context()
+        with self.firewall_policy() as fwp1, \
+                self.firewall_policy(shared=False, do_delete=False) as fwp2, \
+                self.firewall(firewall_policy_id=fwp1['firewall_policy']['id'],
+                              admin_state_up=test_db_firewall.ADMIN_STATE_UP,
+                              do_delete=False) as firewall:
+            fw_id = firewall['firewall']['id']
+            fwp2_id = fwp2['firewall_policy']['id']
+            self.callbacks.set_firewall_status(ctx, fw_id, const.ACTIVE)
+            data = {'firewall': {'firewall_policy_id': fwp2_id}}
+            req = self.new_update_request('firewalls', data, fw_id)
+            res = req.get_response(self.ext_api)
+            self.assertEqual(200, res.status_int)
+
+    def test_update_firewall_with_shared_fwp(self):
+        ctx = context.get_admin_context()
+        with self.firewall_policy() as fwp1, \
+                self.firewall_policy(tenant_id='tenant2',
+                                     do_delete=False) as fwp2, \
+                self.firewall(firewall_policy_id=fwp1['firewall_policy']['id'],
+                              admin_state_up=test_db_firewall.ADMIN_STATE_UP,
+                              do_delete=False) as firewall:
+            fw_id = firewall['firewall']['id']
+            fwp2_id = fwp2['firewall_policy']['id']
+            self.callbacks.set_firewall_status(ctx, fw_id, const.ACTIVE)
+            data = {'firewall': {'firewall_policy_id': fwp2_id}}
+            req = self.new_update_request('firewalls', data, fw_id)
+            res = req.get_response(self.ext_api)
+            self.assertEqual(200, res.status_int)
+
+    def test_update_firewall_with_admin_and_fwp_different_tenant(self):
+        ctx = context.get_admin_context()
+        with self.firewall_policy(do_delete=False) as fwp1, \
+                self.firewall_policy(tenant_id='tenant2', shared=False,
+                                     do_delete=False) as fwp2, \
+                self.firewall(firewall_policy_id=fwp1['firewall_policy']['id'],
+                              admin_state_up=test_db_firewall.ADMIN_STATE_UP,
+                              do_delete=False) as firewall:
+            fw_id = firewall['firewall']['id']
+            fwp2_id = fwp2['firewall_policy']['id']
+            self.callbacks.set_firewall_status(ctx, fw_id, const.ACTIVE)
+            data = {'firewall': {'firewall_policy_id': fwp2_id}}
+            req = self.new_update_request('firewalls', data, fw_id)
+            res = req.get_response(self.ext_api)
+            self.assertEqual(409, res.status_int)
-- 
2.6.4

