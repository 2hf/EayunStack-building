From d3b7f8b41c6ccddf7ae82dd279437fef43746aa8 Mon Sep 17 00:00:00 2001
From: tc1989tc <tangch318@gmail.com>
Date: Tue, 28 Jun 2016 11:47:08 +0800
Subject: [PATCH 45/52] Sync #38 from devel to testing

Lbaas: Enhancement multi VIP bound to same neutron port for agent (#38)

This change includes:
    1. Use vip port id instead of net namespace
    2. Add _undeploy_unknown_instance function to
       delete unknow haproxy instance

Fixes: redmine #7412

Signed-off-by: cheng.tang <tangch318@gmail.com>
(cherry picked from commit b909fb35e79c6db90469b067a0eeb313bafb2852)

Change-Id: Ic198b3bad60c95105fff06ebf4611b5e195e72ae
Signed-off-by: Hunt Xu <mhuntxu@gmail.com>
---
 .../drivers/common/agent_driver_base.py            |  7 ++-
 .../drivers/haproxy/namespace_driver.py            | 68 +++++++++++++++++++---
 2 files changed, 65 insertions(+), 10 deletions(-)

diff --git a/neutron/services/loadbalancer/drivers/common/agent_driver_base.py b/neutron/services/loadbalancer/drivers/common/agent_driver_base.py
index e091849..2c8bfb5 100644
--- a/neutron/services/loadbalancer/drivers/common/agent_driver_base.py
+++ b/neutron/services/loadbalancer/drivers/common/agent_driver_base.py
@@ -15,6 +15,7 @@
 import uuid
 
 from oslo.config import cfg
+from sqlalchemy.orm import exc
 
 from neutron.common import constants as q_const
 from neutron.common import exceptions as n_exc
@@ -85,8 +86,12 @@ class LoadBalancerCallbacks(n_rpc.RpcCallback):
         with context.session.begin(subtransactions=True):
             qry = context.session.query(loadbalancer_db.Pool)
             qry = qry.filter_by(id=pool_id)
-            pool = qry.one()
             retval = {}
+            # qry.one will raise NoResultFound if pool not exist
+            try:
+                pool = qry.one()
+            except exc.NoResultFound:
+                return retval
             retval['pool'] = self.plugin._make_pool_dict(pool)
 
             if pool.vip:
diff --git a/neutron/services/loadbalancer/drivers/haproxy/namespace_driver.py b/neutron/services/loadbalancer/drivers/haproxy/namespace_driver.py
index 04787d4..cc3cdc5 100644
--- a/neutron/services/loadbalancer/drivers/haproxy/namespace_driver.py
+++ b/neutron/services/loadbalancer/drivers/haproxy/namespace_driver.py
@@ -79,16 +79,19 @@ class HaproxyNSDriver(agent_device_driver.AgentDeviceDriver):
         self.vif_driver = vif_driver
         self.plugin_rpc = plugin_rpc
         self.pool_to_port_id = {}
+        self.port_to_pool_id = {}
 
     @classmethod
     def get_name(cls):
         return DRIVER_NAME
 
     def create(self, logical_config):
-        pool_id = logical_config['pool']['id']
-        namespace = get_ns_name(pool_id)
+        port_id = logical_config['vip']['port']['id']
+        namespace = get_ns_name(port_id)
 
-        self._plug(namespace, logical_config['vip']['port'])
+        # vip port has been pluged
+        if port_id not in self.port_to_pool_id:
+            self._plug(namespace, logical_config['vip']['port'])
         self._spawn(logical_config)
 
     def update(self, logical_config):
@@ -101,7 +104,8 @@ class HaproxyNSDriver(agent_device_driver.AgentDeviceDriver):
 
     def _spawn(self, logical_config, extra_cmd_args=()):
         pool_id = logical_config['pool']['id']
-        namespace = get_ns_name(pool_id)
+        port_id = logical_config['vip']['port']['id']
+        namespace = get_ns_name(port_id)
         conf_path = self._get_state_file_path(pool_id, 'conf')
         pid_path = self._get_state_file_path(pool_id, 'pid')
         sock_path = self._get_state_file_path(pool_id, 'sock')
@@ -116,11 +120,13 @@ class HaproxyNSDriver(agent_device_driver.AgentDeviceDriver):
 
         # remember the pool<>port mapping
         self.pool_to_port_id[pool_id] = logical_config['vip']['port']['id']
+        if port_id not in self.port_to_pool_id:
+            self.port_to_pool_id[port_id] = []
+        self.port_to_pool_id[port_id].append(pool_id)
 
     @n_utils.synchronized('haproxy-driver')
     def undeploy_instance(self, pool_id, cleanup_namespace=False):
-        namespace = get_ns_name(pool_id)
-        ns = ip_lib.IPWrapper(self.root_helper, namespace)
+        ns = None
         pid_path = self._get_state_file_path(pool_id, 'pid')
 
         # kill the process
@@ -128,7 +134,17 @@ class HaproxyNSDriver(agent_device_driver.AgentDeviceDriver):
 
         # unplug the ports
         if pool_id in self.pool_to_port_id:
-            self._unplug(namespace, self.pool_to_port_id[pool_id])
+            port_id = self.pool_to_port_id[pool_id]
+            namespace = get_ns_name(port_id)
+            ns = ip_lib.IPWrapper(self.root_helper, namespace)
+
+            self.port_to_pool_id[port_id].remove(pool_id)
+            if not self.port_to_pool_id[port_id]:
+                # last pool deteled
+                self._unplug(namespace, port_id)
+                ns.garbage_collect_namespace()
+                del self.port_to_pool_id[port_id]
+            del self.pool_to_port_id[pool_id]
 
         # delete all devices from namespace;
         # used when deleting orphans and port_id is not known for pool_id
@@ -140,10 +156,17 @@ class HaproxyNSDriver(agent_device_driver.AgentDeviceDriver):
         conf_dir = os.path.dirname(self._get_state_file_path(pool_id, ''))
         if os.path.isdir(conf_dir):
             shutil.rmtree(conf_dir)
-        ns.garbage_collect_namespace()
 
     def exists(self, pool_id):
-        namespace = get_ns_name(pool_id)
+        if pool_id not in self.pool_to_port_id:
+            logical_config = self.plugin_rpc.get_logical_device(pool_id)
+            if 'vip' not in logical_config:
+                return False
+            port_id = logical_config['vip']['port']['id']
+        else:
+            port_id = self.pool_to_port_id[pool_id]
+
+        namespace = get_ns_name(port_id)
         root_ns = ip_lib.IPWrapper(self.root_helper)
 
         socket_path = self._get_state_file_path(pool_id, 'sock', False)
@@ -355,6 +378,28 @@ class HaproxyNSDriver(agent_device_driver.AgentDeviceDriver):
     def delete_pool_health_monitor(self, health_monitor, pool_id):
         self._refresh_device(pool_id)
 
+    @n_utils.synchronized('haproxy-driver')
+    def _clean_up_unknown_namespace(self):
+        all_ns = ip_lib.IPWrapper.get_namespaces(self.root_helper)
+        all_lbaas_ns = [_ns for _ns in all_ns if _ns.startswith(NS_PREFIX)]
+        known_ns = []
+
+        for _port in self.port_to_pool_id.keys():
+            known_ns.append(get_ns_name(_port))
+
+        # clean up all unknown lbaas namespace
+        for _namespace in set(all_lbaas_ns) - set(known_ns):
+            _ns = ip_lib.IPWrapper(self.root_helper, _namespace)
+            for device in _ns.get_devices(exclude_loopback=True):
+                self.vif_driver.unplug(device.name, namespace=_namespace)
+            _ns.netns.delete(_namespace)
+
+    @n_utils.synchronized('haproxy-driver')
+    def _undeploy_unknown_instance(self, pool_id):
+        pid_path = self._get_state_file_path(pool_id, 'pid')
+        # kill the process if exist
+        kill_pids_in_file(self.root_helper, pid_path)
+
     def remove_orphans(self, known_pool_ids):
         if not os.path.exists(self.state_path):
             return
@@ -364,6 +409,11 @@ class HaproxyNSDriver(agent_device_driver.AgentDeviceDriver):
         for pool_id in orphans:
             if self.exists(pool_id):
                 self.undeploy_instance(pool_id, cleanup_namespace=True)
+            else:
+                # in this case, pool id not in self.pool_to_port_id
+                self._undeploy_unknown_instance(pool_id)
+        # clean up unknown lbaas namespace
+        self._clean_up_unknown_namespace()
 
 
 # NOTE (markmcclain) For compliance with interface.py which expects objects
-- 
2.10.0

