From 5f90f65766006764974d046ce7b9955a3862ea52 Mon Sep 17 00:00:00 2001
From: huntxu <mhuntxu@gmail.com>
Date: Mon, 7 Dec 2015 00:48:24 +0800
Subject: [PATCH 7/8] Add pptp vpn credential support

Signed-off-by: huntxu <mhuntxu@gmail.com>
Signed-off-by: Hunt Xu <mhuntxu@gmail.com>
---
 .../neutron/v2_0/vpn/eayun_pptp_credential.py      | 78 ++++++++++++++++++++++
 neutronclient/shell.py                             |  6 ++
 neutronclient/v2_0/client.py                       | 33 +++++++++
 3 files changed, 117 insertions(+)
 create mode 100644 neutronclient/neutron/v2_0/vpn/eayun_pptp_credential.py

diff --git a/neutronclient/neutron/v2_0/vpn/eayun_pptp_credential.py b/neutronclient/neutron/v2_0/vpn/eayun_pptp_credential.py
new file mode 100644
index 0000000..cbea101
--- /dev/null
+++ b/neutronclient/neutron/v2_0/vpn/eayun_pptp_credential.py
@@ -0,0 +1,78 @@
+# Copyright (c) 2015 Eayun, Inc.
+# All rights reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+#
+
+from neutronclient.neutron import v2_0 as neutronv20
+from neutronclient.openstack.common.gettextutils import _
+
+
+class ListPPTPCredential(neutronv20.ListCommand):
+    """List PPTP credentials that belong to a given tenant."""
+
+    resource = 'pptp_credential'
+    list_columns = ['id', 'username', 'password', 'vpnservices']
+    pagination_support = True
+    sorting_support = True
+
+
+class ShowPPTPCredential(neutronv20.ShowCommand):
+    """Show information of a given PPTP credential."""
+
+    resource = 'pptp_credential'
+
+
+class CreatePPTPCredential(neutronv20.CreateCommand):
+    """Create an PPTP credential."""
+
+    resource = 'pptp_credential'
+
+    def add_known_arguments(self, parser):
+        parser.add_argument(
+            'username', metavar='USERNAME',
+            help=_('Username of the PPTP credential.'))
+        parser.add_argument(
+            'password', metavar='PASSWORD',
+            help=_('Password of the PPTP credential.'))
+
+    def args2body(self, parsed_args):
+        body = {
+            'pptp_credential': {
+                'username': parsed_args.username,
+                'password': parsed_args.password,
+            }
+        }
+        return body
+
+
+class UpdatePPTPCredential(neutronv20.UpdateCommand):
+    """Update a given PPTP credential."""
+
+    resource = 'pptp_credential'
+
+    def add_known_arguments(self, parser):
+        parser.add_argument(
+            '--password', help=_('Updated password of the PPTP credential.'))
+
+    def args2body(self, parsed_args):
+        body = {'pptp_credential': {}}
+        if parsed_args.password:
+            body['pptp_credential'].update({'password': parsed_args.password})
+        return body
+
+
+class DeletePPTPCredential(neutronv20.DeleteCommand):
+    """Delete a given PPTP credential."""
+
+    resource = 'pptp_credential'
diff --git a/neutronclient/shell.py b/neutronclient/shell.py
index 19a06ee..f636c43 100644
--- a/neutronclient/shell.py
+++ b/neutronclient/shell.py
@@ -68,6 +68,7 @@ from neutronclient.neutron.v2_0.vpn import ikepolicy
 from neutronclient.neutron.v2_0.vpn import ipsec_site_connection
 from neutronclient.neutron.v2_0.vpn import ipsecpolicy
 from neutronclient.neutron.v2_0.vpn import vpnservice
+from neutronclient.neutron.v2_0.vpn import eayun_pptp_credential
 from neutronclient.neutron.v2_0 import eayun_qos
 from neutronclient.openstack.common.gettextutils import _
 from neutronclient.openstack.common import strutils
@@ -319,6 +320,11 @@ COMMAND_V2 = {
     'portmapping-create': portmapping.CreatePortmapping,
     'portmapping-update': portmapping.UpdatePortmapping,
     'portmapping-delete': portmapping.DeletePortmapping,
+    'eayun-pptp-credential-list': eayun_pptp_credential.ListPPTPCredential,
+    'eayun-pptp-credential-show': eayun_pptp_credential.ShowPPTPCredential,
+    'eayun-pptp-credential-create': eayun_pptp_credential.CreatePPTPCredential,
+    'eayun-pptp-credential-update': eayun_pptp_credential.UpdatePPTPCredential,
+    'eayun-pptp-credential-delete': eayun_pptp_credential.DeletePPTPCredential,
 }
 
 COMMANDS = {'2.0': COMMAND_V2}
diff --git a/neutronclient/v2_0/client.py b/neutronclient/v2_0/client.py
index 2b44901..2b6025c 100644
--- a/neutronclient/v2_0/client.py
+++ b/neutronclient/v2_0/client.py
@@ -174,6 +174,8 @@ class Client(object):
     ikepolicy_path = "/vpn/ikepolicies/%s"
     ipsec_site_connections_path = "/vpn/ipsec-site-connections"
     ipsec_site_connection_path = "/vpn/ipsec-site-connections/%s"
+    pptp_credentials_path = "/vpn/pptp-credentials"
+    pptp_credential_path = "/vpn/pptp-credentials/%s"
     vips_path = "/lb/vips"
     vip_path = "/lb/vips/%s"
     pools_path = "/lb/pools"
@@ -246,6 +248,7 @@ class Client(object):
                      'ikepolicies': 'ikepolicy',
                      'ipsec_site_connections': 'ipsec_site_connection',
                      'vpnservices': 'vpnservice',
+                     'pptp_credentials': 'pptp_credential',
                      'vips': 'vip',
                      'pools': 'pool',
                      'members': 'member',
@@ -639,6 +642,36 @@ class Client(object):
         return self.delete(self.ipsecpolicy_path % (ipsecpolicy))
 
     @APIParamsCall
+    def list_pptp_credentials(self, retrieve_all=True, **_params):
+        """Fetches a list of all configured PPTP credentials for a tenant."""
+        return self.list('pptp_credentials',
+                         self.pptp_credentials_path,
+                         retrieve_all,
+                         **_params)
+
+    @APIParamsCall
+    def show_pptp_credential(self, pptp_credential, **_params):
+        """Fetches information of a specific PPTP credential."""
+        return self.get(self.pptp_credential_path % (pptp_credential),
+                        params=_params)
+
+    @APIParamsCall
+    def create_pptp_credential(self, body=None):
+        """Creates a new PPTP credential."""
+        return self.post(self.pptp_credentials_path, body=body)
+
+    @APIParamsCall
+    def update_pptp_credential(self, pptp_credential, body=None):
+        """Updates a PPTP credential."""
+        return self.put(self.pptp_credential_path % (pptp_credential),
+                        body=body)
+
+    @APIParamsCall
+    def delete_pptp_credential(self, pptp_credential):
+        """Deletes the specified PPTP credential."""
+        return self.delete(self.pptp_credential_path % (pptp_credential))
+
+    @APIParamsCall
     def list_vips(self, retrieve_all=True, **_params):
         """Fetches a list of all load balancer vips for a tenant."""
         # Pass filters in "params" argument to do_request
-- 
2.10.0

